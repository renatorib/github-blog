import { GraphQLClient } from 'graphql-request';
import * as Dom from 'graphql-request/dist/types.dom';
import gql from 'graphql-tag';
export type Maybe<T> = T | null;
export type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };
export type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };
export type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: string;
  String: string;
  Boolean: boolean;
  Int: number;
  Float: number;
  /** A (potentially binary) string encoded using base64. */
  Base64String: any;
  /** Represents non-fractional signed whole numeric values. Since the value may exceed the size of a 32-bit integer, it's encoded as a string. */
  BigInt: any;
  /** An ISO-8601 encoded date string. */
  Date: any;
  /** An ISO-8601 encoded UTC date string. */
  DateTime: any;
  /** A Git object ID. */
  GitObjectID: any;
  /** Git SSH string */
  GitSSHRemote: any;
  /** An ISO-8601 encoded date string. Unlike the DateTime type, GitTimestamp is not converted in UTC. */
  GitTimestamp: any;
  /** A string containing HTML code. */
  HTML: any;
  /** An ISO-8601 encoded UTC date string with millisecond precision. */
  PreciseDateTime: any;
  /** An RFC 3986, RFC 3987, and RFC 6570 (level 4) compliant URI string. */
  URI: any;
  /** A valid x509 certificate string */
  X509Certificate: any;
};


/** Autogenerated input type of AbortQueuedMigrations */
export type AbortQueuedMigrationsInput = {
  /** The ID of the organization that is running the migrations. */
  ownerId: Scalars['ID'];
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
};


/** Autogenerated input type of AcceptEnterpriseAdministratorInvitation */
export type AcceptEnterpriseAdministratorInvitationInput = {
  /** The id of the invitation being accepted */
  invitationId: Scalars['ID'];
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
};


/** Autogenerated input type of AcceptTopicSuggestion */
export type AcceptTopicSuggestionInput = {
  /** The Node ID of the repository. */
  repositoryId: Scalars['ID'];
  /** The name of the suggested topic. */
  name: Scalars['String'];
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
};




/** The actor's type. */
export type ActorType =
  /** Indicates a user actor. */
  | 'USER'
  /** Indicates a team actor. */
  | 'TEAM';

/** Autogenerated input type of AddAssigneesToAssignable */
export type AddAssigneesToAssignableInput = {
  /** The id of the assignable object to add assignees to. */
  assignableId: Scalars['ID'];
  /** The id of users to add as assignees. */
  assigneeIds: Array<Scalars['ID']>;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
};


/** Autogenerated input type of AddComment */
export type AddCommentInput = {
  /** The Node ID of the subject to modify. */
  subjectId: Scalars['ID'];
  /** The contents of the comment. */
  body: Scalars['String'];
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
};


/** Autogenerated input type of AddDiscussionComment */
export type AddDiscussionCommentInput = {
  /** The Node ID of the discussion to comment on. */
  discussionId: Scalars['ID'];
  /** The Node ID of the discussion comment within this discussion to reply to. */
  replyToId?: Maybe<Scalars['ID']>;
  /** The contents of the comment. */
  body: Scalars['String'];
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
};


/** Autogenerated input type of AddDiscussionPollVote */
export type AddDiscussionPollVoteInput = {
  /** The Node ID of the discussion poll option to vote for. */
  pollOptionId: Scalars['ID'];
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
};


/** Autogenerated input type of AddEnterpriseOrganizationMember */
export type AddEnterpriseOrganizationMemberInput = {
  /** The ID of the enterprise which owns the organization. */
  enterpriseId: Scalars['ID'];
  /** The ID of the organization the users will be added to. */
  organizationId: Scalars['ID'];
  /** The IDs of the enterprise members to add. */
  userIds: Array<Scalars['ID']>;
  /** The role to assign the users in the organization */
  role?: Maybe<OrganizationMemberRole>;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
};


/** Autogenerated input type of AddEnterpriseSupportEntitlement */
export type AddEnterpriseSupportEntitlementInput = {
  /** The ID of the Enterprise which the admin belongs to. */
  enterpriseId: Scalars['ID'];
  /** The login of a member who will receive the support entitlement. */
  login: Scalars['String'];
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
};


/** Autogenerated input type of AddLabelsToLabelable */
export type AddLabelsToLabelableInput = {
  /** The id of the labelable object to add labels to. */
  labelableId: Scalars['ID'];
  /** The ids of the labels to add. */
  labelIds: Array<Scalars['ID']>;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
};


/** Autogenerated input type of AddProjectCard */
export type AddProjectCardInput = {
  /** The Node ID of the ProjectColumn. */
  projectColumnId: Scalars['ID'];
  /** The content of the card. Must be a member of the ProjectCardItem union */
  contentId?: Maybe<Scalars['ID']>;
  /** The note on the card. */
  note?: Maybe<Scalars['String']>;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
};


/** Autogenerated input type of AddProjectColumn */
export type AddProjectColumnInput = {
  /** The Node ID of the project. */
  projectId: Scalars['ID'];
  /** The name of the column. */
  name: Scalars['String'];
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
};


/** Autogenerated input type of AddProjectV2DraftIssue */
export type AddProjectV2DraftIssueInput = {
  /** The ID of the Project to add the draft issue to. */
  projectId: Scalars['ID'];
  /** The title of the draft issue. A project item can also be created by providing the URL of an Issue or Pull Request if you have access. */
  title: Scalars['String'];
  /** The body of the draft issue. */
  body?: Maybe<Scalars['String']>;
  /** The IDs of the assignees of the draft issue. */
  assigneeIds?: Maybe<Array<Scalars['ID']>>;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
};


/** Autogenerated input type of AddProjectV2ItemById */
export type AddProjectV2ItemByIdInput = {
  /** The ID of the Project to add the item to. */
  projectId: Scalars['ID'];
  /** The id of the Issue or Pull Request to add. */
  contentId: Scalars['ID'];
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
};


/** Autogenerated input type of AddPullRequestReviewComment */
export type AddPullRequestReviewCommentInput = {
  /**
   * The node ID of the pull request reviewing
   *
   * **Upcoming Change on 2023-10-01 UTC**
   * **Description:** `pullRequestId` will be removed. use addPullRequestReviewThread or addPullRequestReviewThreadReply instead
   * **Reason:** We are deprecating the addPullRequestReviewComment mutation
   */
  pullRequestId?: Maybe<Scalars['ID']>;
  /**
   * The Node ID of the review to modify.
   *
   * **Upcoming Change on 2023-10-01 UTC**
   * **Description:** `pullRequestReviewId` will be removed. use addPullRequestReviewThread or addPullRequestReviewThreadReply instead
   * **Reason:** We are deprecating the addPullRequestReviewComment mutation
   */
  pullRequestReviewId?: Maybe<Scalars['ID']>;
  /**
   * The SHA of the commit to comment on.
   *
   * **Upcoming Change on 2023-10-01 UTC**
   * **Description:** `commitOID` will be removed. use addPullRequestReviewThread or addPullRequestReviewThreadReply instead
   * **Reason:** We are deprecating the addPullRequestReviewComment mutation
   */
  commitOID?: Maybe<Scalars['GitObjectID']>;
  /**
   * The text of the comment. This field is required
   *
   * **Upcoming Change on 2023-10-01 UTC**
   * **Description:** `body` will be removed. use addPullRequestReviewThread or addPullRequestReviewThreadReply instead
   * **Reason:** We are deprecating the addPullRequestReviewComment mutation
   */
  body?: Maybe<Scalars['String']>;
  /**
   * The relative path of the file to comment on.
   *
   * **Upcoming Change on 2023-10-01 UTC**
   * **Description:** `path` will be removed. use addPullRequestReviewThread or addPullRequestReviewThreadReply instead
   * **Reason:** We are deprecating the addPullRequestReviewComment mutation
   */
  path?: Maybe<Scalars['String']>;
  /**
   * The line index in the diff to comment on.
   *
   * **Upcoming Change on 2023-10-01 UTC**
   * **Description:** `position` will be removed. use addPullRequestReviewThread or addPullRequestReviewThreadReply instead
   * **Reason:** We are deprecating the addPullRequestReviewComment mutation
   */
  position?: Maybe<Scalars['Int']>;
  /**
   * The comment id to reply to.
   *
   * **Upcoming Change on 2023-10-01 UTC**
   * **Description:** `inReplyTo` will be removed. use addPullRequestReviewThread or addPullRequestReviewThreadReply instead
   * **Reason:** We are deprecating the addPullRequestReviewComment mutation
   */
  inReplyTo?: Maybe<Scalars['ID']>;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
};


/** Autogenerated input type of AddPullRequestReview */
export type AddPullRequestReviewInput = {
  /** The Node ID of the pull request to modify. */
  pullRequestId: Scalars['ID'];
  /** The commit OID the review pertains to. */
  commitOID?: Maybe<Scalars['GitObjectID']>;
  /** The contents of the review body comment. */
  body?: Maybe<Scalars['String']>;
  /** The event to perform on the pull request review. */
  event?: Maybe<PullRequestReviewEvent>;
  /**
   * The review line comments.
   *
   * **Upcoming Change on 2023-10-01 UTC**
   * **Description:** `comments` will be removed. use the `threads` argument instead
   * **Reason:** We are deprecating comment fields that use diff-relative positioning
   */
  comments?: Maybe<Array<Maybe<DraftPullRequestReviewComment>>>;
  /** The review line comment threads. */
  threads?: Maybe<Array<Maybe<DraftPullRequestReviewThread>>>;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
};


/** Autogenerated input type of AddPullRequestReviewThread */
export type AddPullRequestReviewThreadInput = {
  /** Path to the file being commented on. */
  path: Scalars['String'];
  /** Body of the thread's first comment. */
  body: Scalars['String'];
  /** The node ID of the pull request reviewing */
  pullRequestId?: Maybe<Scalars['ID']>;
  /** The Node ID of the review to modify. */
  pullRequestReviewId?: Maybe<Scalars['ID']>;
  /** The line of the blob to which the thread refers, required for line-level threads. The end of the line range for multi-line comments. */
  line?: Maybe<Scalars['Int']>;
  /** The side of the diff on which the line resides. For multi-line comments, this is the side for the end of the line range. */
  side?: Maybe<DiffSide>;
  /** The first line of the range to which the comment refers. */
  startLine?: Maybe<Scalars['Int']>;
  /** The side of the diff on which the start line resides. */
  startSide?: Maybe<DiffSide>;
  /** The level at which the comments in the corresponding thread are targeted, can be a diff line or a file */
  subjectType?: Maybe<PullRequestReviewThreadSubjectType>;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
};


/** Autogenerated input type of AddReaction */
export type AddReactionInput = {
  /** The Node ID of the subject to modify. */
  subjectId: Scalars['ID'];
  /** The name of the emoji to react with. */
  content: ReactionContent;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
};


/** Autogenerated input type of AddStar */
export type AddStarInput = {
  /** The Starrable ID to star. */
  starrableId: Scalars['ID'];
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
};


/** Autogenerated input type of AddUpvote */
export type AddUpvoteInput = {
  /** The Node ID of the discussion or comment to upvote. */
  subjectId: Scalars['ID'];
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
};


/** Autogenerated input type of AddVerifiableDomain */
export type AddVerifiableDomainInput = {
  /** The ID of the owner to add the domain to */
  ownerId: Scalars['ID'];
  /** The URL of the domain */
  domain: Scalars['URI'];
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
};






/** Autogenerated input type of ApproveDeployments */
export type ApproveDeploymentsInput = {
  /** The node ID of the workflow run containing the pending deployments. */
  workflowRunId: Scalars['ID'];
  /** The ids of environments to reject deployments */
  environmentIds: Array<Scalars['ID']>;
  /** Optional comment for approving deployments */
  comment?: Maybe<Scalars['String']>;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
};


/** Autogenerated input type of ApproveVerifiableDomain */
export type ApproveVerifiableDomainInput = {
  /** The ID of the verifiable domain to approve. */
  id: Scalars['ID'];
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
};


/** Autogenerated input type of ArchiveProjectV2Item */
export type ArchiveProjectV2ItemInput = {
  /** The ID of the Project to archive the item from. */
  projectId: Scalars['ID'];
  /** The ID of the ProjectV2Item to archive. */
  itemId: Scalars['ID'];
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
};


/** Autogenerated input type of ArchiveRepository */
export type ArchiveRepositoryInput = {
  /** The ID of the repository to mark as archived. */
  repositoryId: Scalars['ID'];
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
};







/** Ordering options for Audit Log connections. */
export type AuditLogOrder = {
  /** The field to order Audit Logs by. */
  field?: Maybe<AuditLogOrderField>;
  /** The ordering direction. */
  direction?: Maybe<OrderDirection>;
};

/** Properties by which Audit Log connections can be ordered. */
export type AuditLogOrderField =
  /** Order audit log entries by timestamp */
  | 'CREATED_AT';



















/** Parameters to be used for the branch_name_pattern rule */
export type BranchNamePatternParametersInput = {
  /** How this rule will appear to users. */
  name?: Maybe<Scalars['String']>;
  /** If true, the rule will fail if the pattern matches. */
  negate?: Maybe<Scalars['Boolean']>;
  /** The operator to use for matching. */
  operator: Scalars['String'];
  /** The pattern to match with. */
  pattern: Scalars['String'];
};







/** Information about a sponsorship to make for a user or organization with a GitHub Sponsors profile, as part of sponsoring many users or organizations at once. */
export type BulkSponsorship = {
  /** The ID of the user or organization who is receiving the sponsorship. Required if sponsorableLogin is not given. */
  sponsorableId?: Maybe<Scalars['ID']>;
  /** The username of the user or organization who is receiving the sponsorship. Required if sponsorableId is not given. */
  sponsorableLogin?: Maybe<Scalars['String']>;
  /** The amount to pay to the sponsorable in US dollars. Valid values: 1-12000. */
  amount: Scalars['Int'];
};












/** Autogenerated input type of CancelEnterpriseAdminInvitation */
export type CancelEnterpriseAdminInvitationInput = {
  /** The Node ID of the pending enterprise administrator invitation. */
  invitationId: Scalars['ID'];
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
};


/** Autogenerated input type of CancelSponsorship */
export type CancelSponsorshipInput = {
  /** The ID of the user or organization who is acting as the sponsor, paying for the sponsorship. Required if sponsorLogin is not given. */
  sponsorId?: Maybe<Scalars['ID']>;
  /** The username of the user or organization who is acting as the sponsor, paying for the sponsorship. Required if sponsorId is not given. */
  sponsorLogin?: Maybe<Scalars['String']>;
  /** The ID of the user or organization who is receiving the sponsorship. Required if sponsorableLogin is not given. */
  sponsorableId?: Maybe<Scalars['ID']>;
  /** The username of the user or organization who is receiving the sponsorship. Required if sponsorableId is not given. */
  sponsorableLogin?: Maybe<Scalars['String']>;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
};


/** Autogenerated input type of ChangeUserStatus */
export type ChangeUserStatusInput = {
  /** The emoji to represent your status. Can either be a native Unicode emoji or an emoji name with colons, e.g., :grinning:. */
  emoji?: Maybe<Scalars['String']>;
  /** A short description of your current status. */
  message?: Maybe<Scalars['String']>;
  /** The ID of the organization whose members will be allowed to see the status. If omitted, the status will be publicly visible. */
  organizationId?: Maybe<Scalars['ID']>;
  /** Whether this status should indicate you are not fully available on GitHub, e.g., you are away. */
  limitedAvailability?: Maybe<Scalars['Boolean']>;
  /** If set, the user status will not be shown after this date. */
  expiresAt?: Maybe<Scalars['DateTime']>;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
};




/** Information from a check run analysis to specific lines of code. */
export type CheckAnnotationData = {
  /** The path of the file to add an annotation to. */
  path: Scalars['String'];
  /** The location of the annotation */
  location: CheckAnnotationRange;
  /** Represents an annotation's information level */
  annotationLevel: CheckAnnotationLevel;
  /** A short description of the feedback for these lines of code. */
  message: Scalars['String'];
  /** The title that represents the annotation. */
  title?: Maybe<Scalars['String']>;
  /** Details about this annotation. */
  rawDetails?: Maybe<Scalars['String']>;
};


/** Represents an annotation's information level. */
export type CheckAnnotationLevel =
  /** An annotation indicating an inescapable error. */
  | 'FAILURE'
  /** An annotation indicating some information. */
  | 'NOTICE'
  /** An annotation indicating an ignorable error. */
  | 'WARNING';


/** Information from a check run analysis to specific lines of code. */
export type CheckAnnotationRange = {
  /** The starting line of the range. */
  startLine: Scalars['Int'];
  /** The starting column of the range. */
  startColumn?: Maybe<Scalars['Int']>;
  /** The ending line of the range. */
  endLine: Scalars['Int'];
  /** The ending column of the range. */
  endColumn?: Maybe<Scalars['Int']>;
};


/** The possible states for a check suite or run conclusion. */
export type CheckConclusionState =
  /** The check suite or run requires action. */
  | 'ACTION_REQUIRED'
  /** The check suite or run has timed out. */
  | 'TIMED_OUT'
  /** The check suite or run has been cancelled. */
  | 'CANCELLED'
  /** The check suite or run has failed. */
  | 'FAILURE'
  /** The check suite or run has succeeded. */
  | 'SUCCESS'
  /** The check suite or run was neutral. */
  | 'NEUTRAL'
  /** The check suite or run was skipped. */
  | 'SKIPPED'
  /** The check suite or run has failed at startup. */
  | 'STARTUP_FAILURE'
  /** The check suite or run was marked stale by GitHub. Only GitHub can use this conclusion. */
  | 'STALE';


/** Possible further actions the integrator can perform. */
export type CheckRunAction = {
  /** The text to be displayed on a button in the web UI. */
  label: Scalars['String'];
  /** A short explanation of what this action would do. */
  description: Scalars['String'];
  /** A reference for the action on the integrator's system.  */
  identifier: Scalars['String'];
};



/** The filters that are available when fetching check runs. */
export type CheckRunFilter = {
  /** Filters the check runs by this type. */
  checkType?: Maybe<CheckRunType>;
  /** Filters the check runs created by this application ID. */
  appId?: Maybe<Scalars['Int']>;
  /** Filters the check runs by this name. */
  checkName?: Maybe<Scalars['String']>;
  /** Filters the check runs by this status. Superceded by statuses. */
  status?: Maybe<CheckStatusState>;
  /** Filters the check runs by this status. Overrides status. */
  statuses?: Maybe<Array<CheckStatusState>>;
  /** Filters the check runs by these conclusions. */
  conclusions?: Maybe<Array<CheckConclusionState>>;
};

/** Descriptive details about the check run. */
export type CheckRunOutput = {
  /** A title to provide for this check run. */
  title: Scalars['String'];
  /** The summary of the check run (supports Commonmark). */
  summary: Scalars['String'];
  /** The details of the check run (supports Commonmark). */
  text?: Maybe<Scalars['String']>;
  /** The annotations that are made as part of the check run. */
  annotations?: Maybe<Array<CheckAnnotationData>>;
  /** Images attached to the check run output displayed in the GitHub pull request UI. */
  images?: Maybe<Array<CheckRunOutputImage>>;
};

/** Images attached to the check run output displayed in the GitHub pull request UI. */
export type CheckRunOutputImage = {
  /** The alternative text for the image. */
  alt: Scalars['String'];
  /** The full URL of the image. */
  imageUrl: Scalars['URI'];
  /** A short image description. */
  caption?: Maybe<Scalars['String']>;
};

/** The possible states of a check run in a status rollup. */
export type CheckRunState =
  /** The check run requires action. */
  | 'ACTION_REQUIRED'
  /** The check run has been cancelled. */
  | 'CANCELLED'
  /** The check run has been completed. */
  | 'COMPLETED'
  /** The check run has failed. */
  | 'FAILURE'
  /** The check run is in progress. */
  | 'IN_PROGRESS'
  /** The check run was neutral. */
  | 'NEUTRAL'
  /** The check run is in pending state. */
  | 'PENDING'
  /** The check run has been queued. */
  | 'QUEUED'
  /** The check run was skipped. */
  | 'SKIPPED'
  /** The check run was marked stale by GitHub. Only GitHub can use this conclusion. */
  | 'STALE'
  /** The check run has failed at startup. */
  | 'STARTUP_FAILURE'
  /** The check run has succeeded. */
  | 'SUCCESS'
  /** The check run has timed out. */
  | 'TIMED_OUT'
  /** The check run is in waiting state. */
  | 'WAITING';


/** The possible types of check runs. */
export type CheckRunType =
  /** Every check run available. */
  | 'ALL'
  /** The latest check run. */
  | 'LATEST';

/** The possible states for a check suite or run status. */
export type CheckStatusState =
  /** The check suite or run has been queued. */
  | 'QUEUED'
  /** The check suite or run is in progress. */
  | 'IN_PROGRESS'
  /** The check suite or run has been completed. */
  | 'COMPLETED'
  /** The check suite or run is in waiting state. */
  | 'WAITING'
  /** The check suite or run is in pending state. */
  | 'PENDING'
  /** The check suite or run has been requested. */
  | 'REQUESTED';





/** The auto-trigger preferences that are available for check suites. */
export type CheckSuiteAutoTriggerPreference = {
  /** The node ID of the application that owns the check suite. */
  appId: Scalars['ID'];
  /** Set to `true` to enable automatic creation of CheckSuite events upon pushes to the repository. */
  setting: Scalars['Boolean'];
};



/** The filters that are available when fetching check suites. */
export type CheckSuiteFilter = {
  /** Filters the check suites created by this application ID. */
  appId?: Maybe<Scalars['Int']>;
  /** Filters the check suites by this name. */
  checkName?: Maybe<Scalars['String']>;
};


/** Autogenerated input type of ClearLabelsFromLabelable */
export type ClearLabelsFromLabelableInput = {
  /** The id of the labelable object to clear the labels from. */
  labelableId: Scalars['ID'];
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
};


/** Autogenerated input type of ClearProjectV2ItemFieldValue */
export type ClearProjectV2ItemFieldValueInput = {
  /** The ID of the Project. */
  projectId: Scalars['ID'];
  /** The ID of the item to be cleared. */
  itemId: Scalars['ID'];
  /** The ID of the field to be cleared. */
  fieldId: Scalars['ID'];
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
};


/** Autogenerated input type of CloneProject */
export type CloneProjectInput = {
  /** The owner ID to create the project under. */
  targetOwnerId: Scalars['ID'];
  /** The source project to clone. */
  sourceId: Scalars['ID'];
  /** Whether or not to clone the source project's workflows. */
  includeWorkflows: Scalars['Boolean'];
  /** The name of the project. */
  name: Scalars['String'];
  /** The description of the project. */
  body?: Maybe<Scalars['String']>;
  /** The visibility of the project, defaults to false (private). */
  public?: Maybe<Scalars['Boolean']>;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
};


/** Autogenerated input type of CloneTemplateRepository */
export type CloneTemplateRepositoryInput = {
  /** The Node ID of the template repository. */
  repositoryId: Scalars['ID'];
  /** The name of the new repository. */
  name: Scalars['String'];
  /** The ID of the owner for the new repository. */
  ownerId: Scalars['ID'];
  /** A short description of the new repository. */
  description?: Maybe<Scalars['String']>;
  /** Indicates the repository's visibility level. */
  visibility: RepositoryVisibility;
  /** Whether to copy all branches from the template to the new repository. Defaults to copying only the default branch of the template. */
  includeAllBranches?: Maybe<Scalars['Boolean']>;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
};



/** Autogenerated input type of CloseDiscussion */
export type CloseDiscussionInput = {
  /** ID of the discussion to be closed. */
  discussionId: Scalars['ID'];
  /** The reason why the discussion is being closed. */
  reason?: Maybe<DiscussionCloseReason>;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
};


/** Autogenerated input type of CloseIssue */
export type CloseIssueInput = {
  /** ID of the issue to be closed. */
  issueId: Scalars['ID'];
  /** The reason the issue is to be closed. */
  stateReason?: Maybe<IssueClosedStateReason>;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
};


/** Autogenerated input type of ClosePullRequest */
export type ClosePullRequestInput = {
  /** ID of the pull request to be closed. */
  pullRequestId: Scalars['ID'];
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
};





/** Collaborators affiliation level with a subject. */
export type CollaboratorAffiliation =
  /** All outside collaborators of an organization-owned subject. */
  | 'OUTSIDE'
  /** All collaborators with permissions to an organization-owned subject, regardless of organization membership status. */
  | 'DIRECT'
  /** All collaborators the authenticated user can see. */
  | 'ALL';


/** A comment author association with repository. */
export type CommentAuthorAssociation =
  /** Author is a member of the organization that owns the repository. */
  | 'MEMBER'
  /** Author is the owner of the repository. */
  | 'OWNER'
  /** Author is a placeholder for an unclaimed user. */
  | 'MANNEQUIN'
  /** Author has been invited to collaborate on the repository. */
  | 'COLLABORATOR'
  /** Author has previously committed to the repository. */
  | 'CONTRIBUTOR'
  /** Author has not previously committed to the repository. */
  | 'FIRST_TIME_CONTRIBUTOR'
  /** Author has not previously committed to GitHub. */
  | 'FIRST_TIMER'
  /** Author has no association with the repository. */
  | 'NONE';

/** The possible errors that will prevent a user from updating a comment. */
export type CommentCannotUpdateReason =
  /** Unable to create comment because repository is archived. */
  | 'ARCHIVED'
  /** You must be the author or have write access to this repository to update this comment. */
  | 'INSUFFICIENT_ACCESS'
  /** Unable to create comment because issue is locked. */
  | 'LOCKED'
  /** You must be logged in to update this comment. */
  | 'LOGIN_REQUIRED'
  /** Repository is under maintenance. */
  | 'MAINTENANCE'
  /** At least one email address must be verified to update this comment. */
  | 'VERIFIED_EMAIL_REQUIRED'
  /** You cannot update this comment */
  | 'DENIED';



/** Specifies an author for filtering Git commits. */
export type CommitAuthor = {
  /** ID of a User to filter by. If non-null, only commits authored by this user will be returned. This field takes precedence over emails. */
  id?: Maybe<Scalars['ID']>;
  /** Email addresses to filter by. Commits authored by any of the specified email addresses will be returned. */
  emails?: Maybe<Array<Scalars['String']>>;
};


/** Parameters to be used for the commit_author_email_pattern rule */
export type CommitAuthorEmailPatternParametersInput = {
  /** How this rule will appear to users. */
  name?: Maybe<Scalars['String']>;
  /** If true, the rule will fail if the pattern matches. */
  negate?: Maybe<Scalars['Boolean']>;
  /** The operator to use for matching. */
  operator: Scalars['String'];
  /** The pattern to match with. */
  pattern: Scalars['String'];
};






/** Ordering options for commit contribution connections. */
export type CommitContributionOrder = {
  /** The field by which to order commit contributions. */
  field: CommitContributionOrderField;
  /** The ordering direction. */
  direction: OrderDirection;
};

/** Properties by which commit contribution connections can be ordered. */
export type CommitContributionOrderField =
  /** Order commit contributions by when they were made. */
  | 'OCCURRED_AT'
  /** Order commit contributions by how many commits they represent. */
  | 'COMMIT_COUNT';




/** A message to include with a new commit */
export type CommitMessage = {
  /** The headline of the message. */
  headline: Scalars['String'];
  /** The body of the message. */
  body?: Maybe<Scalars['String']>;
};


/** Parameters to be used for the commit_message_pattern rule */
export type CommitMessagePatternParametersInput = {
  /** How this rule will appear to users. */
  name?: Maybe<Scalars['String']>;
  /** If true, the rule will fail if the pattern matches. */
  negate?: Maybe<Scalars['Boolean']>;
  /** The operator to use for matching. */
  operator: Scalars['String'];
  /** The pattern to match with. */
  pattern: Scalars['String'];
};

/**
 * A git ref for a commit to be appended to.
 *
 * The ref must be a branch, i.e. its fully qualified name must start
 * with `refs/heads/` (although the input is not required to be fully
 * qualified).
 *
 * The Ref may be specified by its global node ID or by the
 * `repositoryNameWithOwner` and `branchName`.
 *
 * ### Examples
 *
 * Specify a branch using a global node ID:
 *
 *     { "id": "MDM6UmVmMTpyZWZzL2hlYWRzL21haW4=" }
 *
 * Specify a branch using `repositoryNameWithOwner` and `branchName`:
 *
 *     {
 *       "repositoryNameWithOwner": "github/graphql-client",
 *       "branchName": "main"
 *     }
 */
export type CommittableBranch = {
  /** The Node ID of the Ref to be updated. */
  id?: Maybe<Scalars['ID']>;
  /** The nameWithOwner of the repository to commit to. */
  repositoryNameWithOwner?: Maybe<Scalars['String']>;
  /** The unqualified name of the branch to append the commit to. */
  branchName?: Maybe<Scalars['String']>;
};


/** Parameters to be used for the committer_email_pattern rule */
export type CommitterEmailPatternParametersInput = {
  /** How this rule will appear to users. */
  name?: Maybe<Scalars['String']>;
  /** If true, the rule will fail if the pattern matches. */
  negate?: Maybe<Scalars['Boolean']>;
  /** The operator to use for matching. */
  operator: Scalars['String'];
  /** The pattern to match with. */
  pattern: Scalars['String'];
};



/** The status of a git comparison between two refs. */
export type ComparisonStatus =
  /** The head ref is both ahead and behind of the base ref, indicating git history has diverged. */
  | 'DIVERGED'
  /** The head ref is ahead of the base ref. */
  | 'AHEAD'
  /** The head ref is behind the base ref. */
  | 'BEHIND'
  /** The head ref and base ref are identical. */
  | 'IDENTICAL';







/** Varying levels of contributions from none to many. */
export type ContributionLevel =
  /** No contributions occurred. */
  | 'NONE'
  /** Lowest 25% of days of contributions. */
  | 'FIRST_QUARTILE'
  /** Second lowest 25% of days of contributions. More contributions than the first quartile. */
  | 'SECOND_QUARTILE'
  /** Second highest 25% of days of contributions. More contributions than second quartile, less than the fourth quartile. */
  | 'THIRD_QUARTILE'
  /** Highest 25% of days of contributions. More contributions than the third quartile. */
  | 'FOURTH_QUARTILE';

/** Ordering options for contribution connections. */
export type ContributionOrder = {
  /** The ordering direction. */
  direction: OrderDirection;
};


/** Autogenerated input type of ConvertProjectCardNoteToIssue */
export type ConvertProjectCardNoteToIssueInput = {
  /** The ProjectCard ID to convert. */
  projectCardId: Scalars['ID'];
  /** The ID of the repository to create the issue in. */
  repositoryId: Scalars['ID'];
  /** The title of the newly created issue. Defaults to the card's note text. */
  title?: Maybe<Scalars['String']>;
  /** The body of the newly created issue. */
  body?: Maybe<Scalars['String']>;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
};


/** Autogenerated input type of ConvertPullRequestToDraft */
export type ConvertPullRequestToDraftInput = {
  /** ID of the pull request to convert to draft */
  pullRequestId: Scalars['ID'];
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
};





/** Autogenerated input type of CopyProjectV2 */
export type CopyProjectV2Input = {
  /** The ID of the source Project to copy. */
  projectId: Scalars['ID'];
  /** The owner ID of the new project. */
  ownerId: Scalars['ID'];
  /** The title of the project. */
  title: Scalars['String'];
  /** Include draft issues in the new project */
  includeDraftIssues?: Maybe<Scalars['Boolean']>;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
};


/** Autogenerated input type of CreateAttributionInvitation */
export type CreateAttributionInvitationInput = {
  /** The Node ID of the owner scoping the reattributable data. */
  ownerId: Scalars['ID'];
  /** The Node ID of the account owning the data to reattribute. */
  sourceId: Scalars['ID'];
  /** The Node ID of the account which may claim the data. */
  targetId: Scalars['ID'];
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
};


/** Autogenerated input type of CreateBranchProtectionRule */
export type CreateBranchProtectionRuleInput = {
  /** The global relay id of the repository in which a new branch protection rule should be created in. */
  repositoryId: Scalars['ID'];
  /** The glob-like pattern used to determine matching branches. */
  pattern: Scalars['String'];
  /** Are approving reviews required to update matching branches. */
  requiresApprovingReviews?: Maybe<Scalars['Boolean']>;
  /** Number of approving reviews required to update matching branches. */
  requiredApprovingReviewCount?: Maybe<Scalars['Int']>;
  /** Are commits required to be signed. */
  requiresCommitSignatures?: Maybe<Scalars['Boolean']>;
  /** Are merge commits prohibited from being pushed to this branch. */
  requiresLinearHistory?: Maybe<Scalars['Boolean']>;
  /** Is branch creation a protected operation. */
  blocksCreations?: Maybe<Scalars['Boolean']>;
  /** Are force pushes allowed on this branch. */
  allowsForcePushes?: Maybe<Scalars['Boolean']>;
  /** Can this branch be deleted. */
  allowsDeletions?: Maybe<Scalars['Boolean']>;
  /** Can admins overwrite branch protection. */
  isAdminEnforced?: Maybe<Scalars['Boolean']>;
  /** Are status checks required to update matching branches. */
  requiresStatusChecks?: Maybe<Scalars['Boolean']>;
  /** Are branches required to be up to date before merging. */
  requiresStrictStatusChecks?: Maybe<Scalars['Boolean']>;
  /** Are reviews from code owners required to update matching branches. */
  requiresCodeOwnerReviews?: Maybe<Scalars['Boolean']>;
  /** Will new commits pushed to matching branches dismiss pull request review approvals. */
  dismissesStaleReviews?: Maybe<Scalars['Boolean']>;
  /** Is dismissal of pull request reviews restricted. */
  restrictsReviewDismissals?: Maybe<Scalars['Boolean']>;
  /** A list of User, Team, or App IDs allowed to dismiss reviews on pull requests targeting matching branches. */
  reviewDismissalActorIds?: Maybe<Array<Scalars['ID']>>;
  /** A list of User, Team, or App IDs allowed to bypass pull requests targeting matching branches. */
  bypassPullRequestActorIds?: Maybe<Array<Scalars['ID']>>;
  /** A list of User, Team, or App IDs allowed to bypass force push targeting matching branches. */
  bypassForcePushActorIds?: Maybe<Array<Scalars['ID']>>;
  /** Is pushing to matching branches restricted. */
  restrictsPushes?: Maybe<Scalars['Boolean']>;
  /** A list of User, Team, or App IDs allowed to push to matching branches. */
  pushActorIds?: Maybe<Array<Scalars['ID']>>;
  /** List of required status check contexts that must pass for commits to be accepted to matching branches. */
  requiredStatusCheckContexts?: Maybe<Array<Scalars['String']>>;
  /** The list of required status checks */
  requiredStatusChecks?: Maybe<Array<RequiredStatusCheckInput>>;
  /** Are successful deployments required before merging. */
  requiresDeployments?: Maybe<Scalars['Boolean']>;
  /** The list of required deployment environments */
  requiredDeploymentEnvironments?: Maybe<Array<Scalars['String']>>;
  /** Are conversations required to be resolved before merging. */
  requiresConversationResolution?: Maybe<Scalars['Boolean']>;
  /** Whether the most recent push must be approved by someone other than the person who pushed it */
  requireLastPushApproval?: Maybe<Scalars['Boolean']>;
  /** Whether to set the branch as read-only. If this is true, users will not be able to push to the branch. */
  lockBranch?: Maybe<Scalars['Boolean']>;
  /** Whether users can pull changes from upstream when the branch is locked. Set to `true` to allow fork syncing. Set to `false` to prevent fork syncing. */
  lockAllowsFetchAndMerge?: Maybe<Scalars['Boolean']>;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
};


/** Autogenerated input type of CreateCheckRun */
export type CreateCheckRunInput = {
  /** The node ID of the repository. */
  repositoryId: Scalars['ID'];
  /** The name of the check. */
  name: Scalars['String'];
  /** The SHA of the head commit. */
  headSha: Scalars['GitObjectID'];
  /** The URL of the integrator's site that has the full details of the check. */
  detailsUrl?: Maybe<Scalars['URI']>;
  /** A reference for the run on the integrator's system. */
  externalId?: Maybe<Scalars['String']>;
  /** The current status. */
  status?: Maybe<RequestableCheckStatusState>;
  /** The time that the check run began. */
  startedAt?: Maybe<Scalars['DateTime']>;
  /** The final conclusion of the check. */
  conclusion?: Maybe<CheckConclusionState>;
  /** The time that the check run finished. */
  completedAt?: Maybe<Scalars['DateTime']>;
  /** Descriptive details about the run. */
  output?: Maybe<CheckRunOutput>;
  /** Possible further actions the integrator can perform, which a user may trigger. */
  actions?: Maybe<Array<CheckRunAction>>;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
};


/** Autogenerated input type of CreateCheckSuite */
export type CreateCheckSuiteInput = {
  /** The Node ID of the repository. */
  repositoryId: Scalars['ID'];
  /** The SHA of the head commit. */
  headSha: Scalars['GitObjectID'];
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
};


/** Autogenerated input type of CreateCommitOnBranch */
export type CreateCommitOnBranchInput = {
  /** The Ref to be updated.  Must be a branch. */
  branch: CommittableBranch;
  /** A description of changes to files in this commit. */
  fileChanges?: Maybe<FileChanges>;
  /** The commit message the be included with the commit. */
  message: CommitMessage;
  /** The git commit oid expected at the head of the branch prior to the commit */
  expectedHeadOid: Scalars['GitObjectID'];
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
};


/** Autogenerated input type of CreateDiscussion */
export type CreateDiscussionInput = {
  /** The id of the repository on which to create the discussion. */
  repositoryId: Scalars['ID'];
  /** The title of the discussion. */
  title: Scalars['String'];
  /** The body of the discussion. */
  body: Scalars['String'];
  /** The id of the discussion category to associate with this discussion. */
  categoryId: Scalars['ID'];
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
};


/** Autogenerated input type of CreateEnterpriseOrganization */
export type CreateEnterpriseOrganizationInput = {
  /** The ID of the enterprise owning the new organization. */
  enterpriseId: Scalars['ID'];
  /** The login of the new organization. */
  login: Scalars['String'];
  /** The profile name of the new organization. */
  profileName: Scalars['String'];
  /** The email used for sending billing receipts. */
  billingEmail: Scalars['String'];
  /** The logins for the administrators of the new organization. */
  adminLogins: Array<Scalars['String']>;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
};


/** Autogenerated input type of CreateEnvironment */
export type CreateEnvironmentInput = {
  /** The node ID of the repository. */
  repositoryId: Scalars['ID'];
  /** The name of the environment. */
  name: Scalars['String'];
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
};


/** Autogenerated input type of CreateIpAllowListEntry */
export type CreateIpAllowListEntryInput = {
  /** The ID of the owner for which to create the new IP allow list entry. */
  ownerId: Scalars['ID'];
  /** An IP address or range of addresses in CIDR notation. */
  allowListValue: Scalars['String'];
  /** An optional name for the IP allow list entry. */
  name?: Maybe<Scalars['String']>;
  /** Whether the IP allow list entry is active when an IP allow list is enabled. */
  isActive: Scalars['Boolean'];
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
};


/** Autogenerated input type of CreateIssue */
export type CreateIssueInput = {
  /** The Node ID of the repository. */
  repositoryId: Scalars['ID'];
  /** The title for the issue. */
  title: Scalars['String'];
  /** The body for the issue description. */
  body?: Maybe<Scalars['String']>;
  /** The Node ID for the user assignee for this issue. */
  assigneeIds?: Maybe<Array<Scalars['ID']>>;
  /** The Node ID of the milestone for this issue. */
  milestoneId?: Maybe<Scalars['ID']>;
  /** An array of Node IDs of labels for this issue. */
  labelIds?: Maybe<Array<Scalars['ID']>>;
  /** An array of Node IDs for projects associated with this issue. */
  projectIds?: Maybe<Array<Scalars['ID']>>;
  /** The name of an issue template in the repository, assigns labels and assignees from the template to the issue */
  issueTemplate?: Maybe<Scalars['String']>;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
};


/** Autogenerated input type of CreateLinkedBranch */
export type CreateLinkedBranchInput = {
  /** ID of the issue to link to. */
  issueId: Scalars['ID'];
  /** The commit SHA to base the new branch on. */
  oid: Scalars['GitObjectID'];
  /** The name of the new branch. Defaults to issue number and title. */
  name?: Maybe<Scalars['String']>;
  /** ID of the repository to create the branch in. Defaults to the issue repository. */
  repositoryId?: Maybe<Scalars['ID']>;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
};


/** Autogenerated input type of CreateMigrationSource */
export type CreateMigrationSourceInput = {
  /** The migration source name. */
  name: Scalars['String'];
  /** The migration source URL, for example `https://github.com` or `https://monalisa.ghe.com`. */
  url?: Maybe<Scalars['String']>;
  /** The migration source access token. */
  accessToken?: Maybe<Scalars['String']>;
  /** The migration source type. */
  type: MigrationSourceType;
  /** The ID of the organization that will own the migration source. */
  ownerId: Scalars['ID'];
  /** The GitHub personal access token of the user importing to the target repository. */
  githubPat?: Maybe<Scalars['String']>;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
};


/** Autogenerated input type of CreateProject */
export type CreateProjectInput = {
  /** The owner ID to create the project under. */
  ownerId: Scalars['ID'];
  /** The name of project. */
  name: Scalars['String'];
  /** The description of project. */
  body?: Maybe<Scalars['String']>;
  /** The name of the GitHub-provided template. */
  template?: Maybe<ProjectTemplate>;
  /** A list of repository IDs to create as linked repositories for the project */
  repositoryIds?: Maybe<Array<Scalars['ID']>>;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
};


/** Autogenerated input type of CreateProjectV2Field */
export type CreateProjectV2FieldInput = {
  /** The ID of the Project to create the field in. */
  projectId: Scalars['ID'];
  /** The data type of the field. */
  dataType: ProjectV2CustomFieldType;
  /** The name of the field. */
  name: Scalars['String'];
  /** Options for a single select field. At least one value is required if data_type is SINGLE_SELECT */
  singleSelectOptions?: Maybe<Array<ProjectV2SingleSelectFieldOptionInput>>;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
};


/** Autogenerated input type of CreateProjectV2 */
export type CreateProjectV2Input = {
  /** The owner ID to create the project under. */
  ownerId: Scalars['ID'];
  /** The title of the project. */
  title: Scalars['String'];
  /** The repository to link the project to. */
  repositoryId?: Maybe<Scalars['ID']>;
  /** The team to link the project to. The team will be granted read permissions. */
  teamId?: Maybe<Scalars['ID']>;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
};


/** Autogenerated input type of CreatePullRequest */
export type CreatePullRequestInput = {
  /** The Node ID of the repository. */
  repositoryId: Scalars['ID'];
  /**
   * The name of the branch you want your changes pulled into. This should be an existing branch
   * on the current repository. You cannot update the base branch on a pull request to point
   * to another repository.
   */
  baseRefName: Scalars['String'];
  /**
   * The name of the branch where your changes are implemented. For cross-repository pull requests
   * in the same network, namespace `head_ref_name` with a user like this: `username:branch`.
   */
  headRefName: Scalars['String'];
  /** The Node ID of the head repository. */
  headRepositoryId?: Maybe<Scalars['ID']>;
  /** The title of the pull request. */
  title: Scalars['String'];
  /** The contents of the pull request. */
  body?: Maybe<Scalars['String']>;
  /** Indicates whether maintainers can modify the pull request. */
  maintainerCanModify?: Maybe<Scalars['Boolean']>;
  /** Indicates whether this pull request should be a draft. */
  draft?: Maybe<Scalars['Boolean']>;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
};


/** Autogenerated input type of CreateRef */
export type CreateRefInput = {
  /** The Node ID of the Repository to create the Ref in. */
  repositoryId: Scalars['ID'];
  /** The fully qualified name of the new Ref (ie: `refs/heads/my_new_branch`). */
  name: Scalars['String'];
  /** The GitObjectID that the new Ref shall target. Must point to a commit. */
  oid: Scalars['GitObjectID'];
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
};


/** Autogenerated input type of CreateRepository */
export type CreateRepositoryInput = {
  /** The name of the new repository. */
  name: Scalars['String'];
  /** The ID of the owner for the new repository. */
  ownerId?: Maybe<Scalars['ID']>;
  /** A short description of the new repository. */
  description?: Maybe<Scalars['String']>;
  /** Indicates the repository's visibility level. */
  visibility: RepositoryVisibility;
  /** Whether this repository should be marked as a template such that anyone who can access it can create new repositories with the same files and directory structure. */
  template?: Maybe<Scalars['Boolean']>;
  /** The URL for a web page about this repository. */
  homepageUrl?: Maybe<Scalars['URI']>;
  /** Indicates if the repository should have the wiki feature enabled. */
  hasWikiEnabled?: Maybe<Scalars['Boolean']>;
  /** Indicates if the repository should have the issues feature enabled. */
  hasIssuesEnabled?: Maybe<Scalars['Boolean']>;
  /** When an organization is specified as the owner, this ID identifies the team that should be granted access to the new repository. */
  teamId?: Maybe<Scalars['ID']>;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
};


/** Autogenerated input type of CreateRepositoryRuleset */
export type CreateRepositoryRulesetInput = {
  /** The global relay id of the source in which a new ruleset should be created in. */
  sourceId: Scalars['ID'];
  /** The name of the ruleset. */
  name: Scalars['String'];
  /** The target of the ruleset. */
  target?: Maybe<RepositoryRulesetTarget>;
  /** The list of rules for this ruleset */
  rules?: Maybe<Array<RepositoryRuleInput>>;
  /** The set of conditions for this ruleset */
  conditions: RepositoryRuleConditionsInput;
  /** The enforcement level for this ruleset */
  enforcement: RuleEnforcement;
  /** The bypass mode for this ruleset */
  bypassMode?: Maybe<RuleBypassMode>;
  /** A list of Team or App IDs allowed to bypass rules in this ruleset. */
  bypassActorIds?: Maybe<Array<Scalars['ID']>>;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
};


/** Autogenerated input type of CreateSponsorsListing */
export type CreateSponsorsListingInput = {
  /** The username of the organization to create a GitHub Sponsors profile for, if desired. Defaults to creating a GitHub Sponsors profile for the authenticated user if omitted. */
  sponsorableLogin?: Maybe<Scalars['String']>;
  /** The username of the supported fiscal host's GitHub organization, if you want to receive sponsorship payouts through a fiscal host rather than directly to a bank account. For example, 'Open-Source-Collective' for Open Source Collective or 'numfocus' for numFOCUS. Case insensitive. See https://docs.github.com/sponsors/receiving-sponsorships-through-github-sponsors/using-a-fiscal-host-to-receive-github-sponsors-payouts for more information. */
  fiscalHostLogin?: Maybe<Scalars['String']>;
  /** The URL for your profile page on the fiscal host's website, e.g., https://opencollective.com/babel or https://numfocus.org/project/bokeh. Required if fiscalHostLogin is specified. */
  fiscallyHostedProjectProfileUrl?: Maybe<Scalars['String']>;
  /** The country or region where the sponsorable's bank account is located. Required if fiscalHostLogin is not specified, ignored when fiscalHostLogin is specified. */
  billingCountryOrRegionCode?: Maybe<SponsorsCountryOrRegionCode>;
  /** The country or region where the sponsorable resides. This is for tax purposes. Required if the sponsorable is yourself, ignored when sponsorableLogin specifies an organization. */
  residenceCountryOrRegionCode?: Maybe<SponsorsCountryOrRegionCode>;
  /** The email address we should use to contact you about the GitHub Sponsors profile being created. This will not be shared publicly. Must be a verified email address already on your GitHub account. Only relevant when the sponsorable is yourself. Defaults to your primary email address on file if omitted. */
  contactEmail?: Maybe<Scalars['String']>;
  /** Provide an introduction to serve as the main focus that appears on your GitHub Sponsors profile. It's a great opportunity to help potential sponsors learn more about you, your work, and why their sponsorship is important to you. GitHub-flavored Markdown is supported. */
  fullDescription?: Maybe<Scalars['String']>;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
};


/** Autogenerated input type of CreateSponsorsTier */
export type CreateSponsorsTierInput = {
  /** The ID of the user or organization who owns the GitHub Sponsors profile. Defaults to the current user if omitted and sponsorableLogin is not given. */
  sponsorableId?: Maybe<Scalars['ID']>;
  /** The username of the user or organization who owns the GitHub Sponsors profile. Defaults to the current user if omitted and sponsorableId is not given. */
  sponsorableLogin?: Maybe<Scalars['String']>;
  /** The value of the new tier in US dollars. Valid values: 1-12000. */
  amount: Scalars['Int'];
  /** Whether sponsorships using this tier should happen monthly/yearly or just once. */
  isRecurring?: Maybe<Scalars['Boolean']>;
  /** Optional ID of the private repository that sponsors at this tier should gain read-only access to. Must be owned by an organization. */
  repositoryId?: Maybe<Scalars['ID']>;
  /** Optional login of the organization owner of the private repository that sponsors at this tier should gain read-only access to. Necessary if repositoryName is given. Will be ignored if repositoryId is given. */
  repositoryOwnerLogin?: Maybe<Scalars['String']>;
  /** Optional name of the private repository that sponsors at this tier should gain read-only access to. Must be owned by an organization. Necessary if repositoryOwnerLogin is given. Will be ignored if repositoryId is given. */
  repositoryName?: Maybe<Scalars['String']>;
  /** Optional message new sponsors at this tier will receive. */
  welcomeMessage?: Maybe<Scalars['String']>;
  /** A description of what this tier is, what perks sponsors might receive, what a sponsorship at this tier means for you, etc. */
  description: Scalars['String'];
  /** Whether to make the tier available immediately for sponsors to choose. Defaults to creating a draft tier that will not be publicly visible. */
  publish?: Maybe<Scalars['Boolean']>;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
};


/** Autogenerated input type of CreateSponsorship */
export type CreateSponsorshipInput = {
  /** The ID of the user or organization who is acting as the sponsor, paying for the sponsorship. Required if sponsorLogin is not given. */
  sponsorId?: Maybe<Scalars['ID']>;
  /** The username of the user or organization who is acting as the sponsor, paying for the sponsorship. Required if sponsorId is not given. */
  sponsorLogin?: Maybe<Scalars['String']>;
  /** The ID of the user or organization who is receiving the sponsorship. Required if sponsorableLogin is not given. */
  sponsorableId?: Maybe<Scalars['ID']>;
  /** The username of the user or organization who is receiving the sponsorship. Required if sponsorableId is not given. */
  sponsorableLogin?: Maybe<Scalars['String']>;
  /** The ID of one of sponsorable's existing tiers to sponsor at. Required if amount is not specified. */
  tierId?: Maybe<Scalars['ID']>;
  /** The amount to pay to the sponsorable in US dollars. Required if a tierId is not specified. Valid values: 1-12000. */
  amount?: Maybe<Scalars['Int']>;
  /** Whether the sponsorship should happen monthly/yearly or just this one time. Required if a tierId is not specified. */
  isRecurring?: Maybe<Scalars['Boolean']>;
  /** Whether the sponsor should receive email updates from the sponsorable. */
  receiveEmails?: Maybe<Scalars['Boolean']>;
  /** Specify whether others should be able to see that the sponsor is sponsoring the sponsorable. Public visibility still does not reveal which tier is used. */
  privacyLevel?: Maybe<SponsorshipPrivacy>;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
};


/** Autogenerated input type of CreateSponsorships */
export type CreateSponsorshipsInput = {
  /** The username of the user or organization who is acting as the sponsor, paying for the sponsorships. */
  sponsorLogin: Scalars['String'];
  /** The list of maintainers to sponsor and for how much apiece. */
  sponsorships: Array<BulkSponsorship>;
  /** Whether the sponsor should receive email updates from the sponsorables. */
  receiveEmails?: Maybe<Scalars['Boolean']>;
  /** Specify whether others should be able to see that the sponsor is sponsoring the sponsorables. Public visibility still does not reveal the dollar value of the sponsorship. */
  privacyLevel?: Maybe<SponsorshipPrivacy>;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
};


/** Autogenerated input type of CreateTeamDiscussionComment */
export type CreateTeamDiscussionCommentInput = {
  /** The ID of the discussion to which the comment belongs. */
  discussionId: Scalars['ID'];
  /** The content of the comment. */
  body: Scalars['String'];
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
};


/** Autogenerated input type of CreateTeamDiscussion */
export type CreateTeamDiscussionInput = {
  /** The ID of the team to which the discussion belongs. */
  teamId: Scalars['ID'];
  /** The title of the discussion. */
  title: Scalars['String'];
  /** The content of the discussion. */
  body: Scalars['String'];
  /** If true, restricts the visibility of this discussion to team members and organization admins. If false or not specified, allows any organization member to view this discussion. */
  private?: Maybe<Scalars['Boolean']>;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
};























/** Autogenerated input type of DeclineTopicSuggestion */
export type DeclineTopicSuggestionInput = {
  /** The Node ID of the repository. */
  repositoryId: Scalars['ID'];
  /** The name of the suggested topic. */
  name: Scalars['String'];
  /** The reason why the suggested topic is declined. */
  reason: TopicSuggestionDeclineReason;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
};


/** The possible base permissions for repositories. */
export type DefaultRepositoryPermissionField =
  /** No access */
  | 'NONE'
  /** Can read repos by default */
  | 'READ'
  /** Can read and write repos by default */
  | 'WRITE'
  /** Can read, write, and administrate repos by default */
  | 'ADMIN';


/** Autogenerated input type of DeleteBranchProtectionRule */
export type DeleteBranchProtectionRuleInput = {
  /** The global relay id of the branch protection rule to be deleted. */
  branchProtectionRuleId: Scalars['ID'];
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
};


/** Autogenerated input type of DeleteDeployment */
export type DeleteDeploymentInput = {
  /** The Node ID of the deployment to be deleted. */
  id: Scalars['ID'];
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
};


/** Autogenerated input type of DeleteDiscussionComment */
export type DeleteDiscussionCommentInput = {
  /** The Node id of the discussion comment to delete. */
  id: Scalars['ID'];
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
};


/** Autogenerated input type of DeleteDiscussion */
export type DeleteDiscussionInput = {
  /** The id of the discussion to delete. */
  id: Scalars['ID'];
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
};


/** Autogenerated input type of DeleteEnvironment */
export type DeleteEnvironmentInput = {
  /** The Node ID of the environment to be deleted. */
  id: Scalars['ID'];
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
};


/** Autogenerated input type of DeleteIpAllowListEntry */
export type DeleteIpAllowListEntryInput = {
  /** The ID of the IP allow list entry to delete. */
  ipAllowListEntryId: Scalars['ID'];
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
};


/** Autogenerated input type of DeleteIssueComment */
export type DeleteIssueCommentInput = {
  /** The ID of the comment to delete. */
  id: Scalars['ID'];
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
};


/** Autogenerated input type of DeleteIssue */
export type DeleteIssueInput = {
  /** The ID of the issue to delete. */
  issueId: Scalars['ID'];
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
};


/** Autogenerated input type of DeleteLinkedBranch */
export type DeleteLinkedBranchInput = {
  /** The ID of the linked branch */
  linkedBranchId: Scalars['ID'];
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
};


/** Autogenerated input type of DeleteProjectCard */
export type DeleteProjectCardInput = {
  /** The id of the card to delete. */
  cardId: Scalars['ID'];
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
};


/** Autogenerated input type of DeleteProjectColumn */
export type DeleteProjectColumnInput = {
  /** The id of the column to delete. */
  columnId: Scalars['ID'];
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
};


/** Autogenerated input type of DeleteProject */
export type DeleteProjectInput = {
  /** The Project ID to update. */
  projectId: Scalars['ID'];
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
};


/** Autogenerated input type of DeleteProjectV2Field */
export type DeleteProjectV2FieldInput = {
  /** The ID of the field to delete. */
  fieldId: Scalars['ID'];
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
};


/** Autogenerated input type of DeleteProjectV2 */
export type DeleteProjectV2Input = {
  /** The ID of the Project to delete. */
  projectId: Scalars['ID'];
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
};

/** Autogenerated input type of DeleteProjectV2Item */
export type DeleteProjectV2ItemInput = {
  /** The ID of the Project from which the item should be removed. */
  projectId: Scalars['ID'];
  /** The ID of the item to be removed. */
  itemId: Scalars['ID'];
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
};



/** Autogenerated input type of DeleteProjectV2Workflow */
export type DeleteProjectV2WorkflowInput = {
  /** The ID of the workflow to be removed. */
  workflowId: Scalars['ID'];
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
};


/** Autogenerated input type of DeletePullRequestReviewComment */
export type DeletePullRequestReviewCommentInput = {
  /** The ID of the comment to delete. */
  id: Scalars['ID'];
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
};


/** Autogenerated input type of DeletePullRequestReview */
export type DeletePullRequestReviewInput = {
  /** The Node ID of the pull request review to delete. */
  pullRequestReviewId: Scalars['ID'];
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
};


/** Autogenerated input type of DeleteRef */
export type DeleteRefInput = {
  /** The Node ID of the Ref to be deleted. */
  refId: Scalars['ID'];
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
};


/** Autogenerated input type of DeleteRepositoryRuleset */
export type DeleteRepositoryRulesetInput = {
  /** The global relay id of the repository ruleset to be deleted. */
  repositoryRulesetId: Scalars['ID'];
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
};


/** Autogenerated input type of DeleteTeamDiscussionComment */
export type DeleteTeamDiscussionCommentInput = {
  /** The ID of the comment to delete. */
  id: Scalars['ID'];
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
};


/** Autogenerated input type of DeleteTeamDiscussion */
export type DeleteTeamDiscussionInput = {
  /** The discussion ID to delete. */
  id: Scalars['ID'];
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
};


/** Autogenerated input type of DeleteVerifiableDomain */
export type DeleteVerifiableDomainInput = {
  /** The ID of the verifiable domain to delete. */
  id: Scalars['ID'];
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
};





/** The possible ecosystems of a dependency graph package. */
export type DependencyGraphEcosystem =
  /** Ruby gems hosted at RubyGems.org */
  | 'RUBYGEMS'
  /** JavaScript packages hosted at npmjs.com */
  | 'NPM'
  /** Python packages hosted at PyPI.org */
  | 'PIP'
  /** Java artifacts hosted at the Maven central repository */
  | 'MAVEN'
  /** .NET packages hosted at the NuGet Gallery */
  | 'NUGET'
  /** PHP packages hosted at packagist.org */
  | 'COMPOSER'
  /** Go modules */
  | 'GO'
  /** GitHub Actions */
  | 'ACTIONS'
  /** Rust crates */
  | 'RUST'
  /** Dart packages hosted at pub.dev */
  | 'PUB';









/** Ordering options for deployment connections */
export type DeploymentOrder = {
  /** The field to order deployments by. */
  field: DeploymentOrderField;
  /** The ordering direction. */
  direction: OrderDirection;
};

/** Properties by which deployment connections can be ordered. */
export type DeploymentOrderField =
  /** Order collection by creation time */
  | 'CREATED_AT';




/** The possible protection rule types. */
export type DeploymentProtectionRuleType =
  /** Required reviewers */
  | 'REQUIRED_REVIEWERS'
  /** Wait timer */
  | 'WAIT_TIMER';







/** The possible states for a deployment review. */
export type DeploymentReviewState =
  /** The deployment was approved. */
  | 'APPROVED'
  /** The deployment was rejected. */
  | 'REJECTED';




/** The possible states in which a deployment can be. */
export type DeploymentState =
  /** The pending deployment was not updated after 30 minutes. */
  | 'ABANDONED'
  /** The deployment is currently active. */
  | 'ACTIVE'
  /** An inactive transient deployment. */
  | 'DESTROYED'
  /** The deployment experienced an error. */
  | 'ERROR'
  /** The deployment has failed. */
  | 'FAILURE'
  /** The deployment is inactive. */
  | 'INACTIVE'
  /** The deployment is pending. */
  | 'PENDING'
  /** The deployment was successful. */
  | 'SUCCESS'
  /** The deployment has queued */
  | 'QUEUED'
  /** The deployment is in progress. */
  | 'IN_PROGRESS'
  /** The deployment is waiting. */
  | 'WAITING';




/** The possible states for a deployment status. */
export type DeploymentStatusState =
  /** The deployment is pending. */
  | 'PENDING'
  /** The deployment was successful. */
  | 'SUCCESS'
  /** The deployment has failed. */
  | 'FAILURE'
  /** The deployment is inactive. */
  | 'INACTIVE'
  /** The deployment experienced an error. */
  | 'ERROR'
  /** The deployment is queued */
  | 'QUEUED'
  /** The deployment is in progress. */
  | 'IN_PROGRESS'
  /** The deployment is waiting. */
  | 'WAITING';

/** Autogenerated input type of DequeuePullRequest */
export type DequeuePullRequestInput = {
  /** The ID of the pull request to be dequeued. */
  id: Scalars['ID'];
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
};


/** The possible sides of a diff. */
export type DiffSide =
  /** The left side of the diff. */
  | 'LEFT'
  /** The right side of the diff. */
  | 'RIGHT';

/** Autogenerated input type of DisablePullRequestAutoMerge */
export type DisablePullRequestAutoMergeInput = {
  /** ID of the pull request to disable auto merge on. */
  pullRequestId: Scalars['ID'];
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
};







/** The possible reasons for closing a discussion. */
export type DiscussionCloseReason =
  /** The discussion has been resolved */
  | 'RESOLVED'
  /** The discussion is no longer relevant */
  | 'OUTDATED'
  /** The discussion is a duplicate of another */
  | 'DUPLICATE';






/** Ways in which lists of discussions can be ordered upon return. */
export type DiscussionOrder = {
  /** The field by which to order discussions. */
  field: DiscussionOrderField;
  /** The direction in which to order discussions by the specified field. */
  direction: OrderDirection;
};

/** Properties by which discussion connections can be ordered. */
export type DiscussionOrderField =
  /** Order discussions by creation time. */
  | 'CREATED_AT'
  /** Order discussions by most recent modification time. */
  | 'UPDATED_AT';





/** Ordering options for discussion poll option connections. */
export type DiscussionPollOptionOrder = {
  /** The field to order poll options by. */
  field: DiscussionPollOptionOrderField;
  /** The ordering direction. */
  direction: OrderDirection;
};

/** Properties by which discussion poll option connections can be ordered. */
export type DiscussionPollOptionOrderField =
  /** Order poll options by the order that the poll author specified when creating the poll. */
  | 'AUTHORED_ORDER'
  /** Order poll options by the number of votes it has. */
  | 'VOTE_COUNT';

/** The possible states of a discussion. */
export type DiscussionState =
  /** A discussion that is open */
  | 'OPEN'
  /** A discussion that has been closed */
  | 'CLOSED';

/** The possible state reasons of a discussion. */
export type DiscussionStateReason =
  /** The discussion has been resolved */
  | 'RESOLVED'
  /** The discussion is no longer relevant */
  | 'OUTDATED'
  /** The discussion is a duplicate of another */
  | 'DUPLICATE'
  /** The discussion was reopened */
  | 'REOPENED';

/** Autogenerated input type of DismissPullRequestReview */
export type DismissPullRequestReviewInput = {
  /** The Node ID of the pull request review to modify. */
  pullRequestReviewId: Scalars['ID'];
  /** The contents of the pull request review dismissal message. */
  message: Scalars['String'];
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
};


/** The possible reasons that a Dependabot alert was dismissed. */
export type DismissReason =
  /** A fix has already been started */
  | 'FIX_STARTED'
  /** No bandwidth to fix this */
  | 'NO_BANDWIDTH'
  /** Risk is tolerable to this project */
  | 'TOLERABLE_RISK'
  /** This alert is inaccurate or incorrect */
  | 'INACCURATE'
  /** Vulnerable code is not actually used */
  | 'NOT_USED';

/** Autogenerated input type of DismissRepositoryVulnerabilityAlert */
export type DismissRepositoryVulnerabilityAlertInput = {
  /** The Dependabot alert ID to dismiss. */
  repositoryVulnerabilityAlertId: Scalars['ID'];
  /** The reason the Dependabot alert is being dismissed. */
  dismissReason: DismissReason;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
};



/** Specifies a review comment to be left with a Pull Request Review. */
export type DraftPullRequestReviewComment = {
  /** Path to the file being commented on. */
  path: Scalars['String'];
  /** Position in the file to leave a comment on. */
  position: Scalars['Int'];
  /** Body of the comment to leave. */
  body: Scalars['String'];
};

/** Specifies a review comment thread to be left with a Pull Request Review. */
export type DraftPullRequestReviewThread = {
  /** Path to the file being commented on. */
  path: Scalars['String'];
  /** The line of the blob to which the thread refers. The end of the line range for multi-line comments. */
  line: Scalars['Int'];
  /** The side of the diff on which the line resides. For multi-line comments, this is the side for the end of the line range. */
  side?: Maybe<DiffSide>;
  /** The first line of the range to which the comment refers. */
  startLine?: Maybe<Scalars['Int']>;
  /** The side of the diff on which the start line resides. */
  startSide?: Maybe<DiffSide>;
  /** Body of the comment to leave. */
  body: Scalars['String'];
};

/** Autogenerated input type of EnablePullRequestAutoMerge */
export type EnablePullRequestAutoMergeInput = {
  /** ID of the pull request to enable auto-merge on. */
  pullRequestId: Scalars['ID'];
  /** Commit headline to use for the commit when the PR is mergable; if omitted, a default message will be used. NOTE: when merging with a merge queue any input value for commit headline is ignored. */
  commitHeadline?: Maybe<Scalars['String']>;
  /** Commit body to use for the commit when the PR is mergable; if omitted, a default message will be used. NOTE: when merging with a merge queue any input value for commit message is ignored. */
  commitBody?: Maybe<Scalars['String']>;
  /** The merge method to use. If omitted, defaults to `MERGE`. NOTE: when merging with a merge queue any input value for merge method is ignored. */
  mergeMethod?: Maybe<PullRequestMergeMethod>;
  /** The email address to associate with this merge. */
  authorEmail?: Maybe<Scalars['String']>;
  /** The expected head OID of the pull request. */
  expectedHeadOid?: Maybe<Scalars['GitObjectID']>;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
};


/** Autogenerated input type of EnqueuePullRequest */
export type EnqueuePullRequestInput = {
  /** The ID of the pull request to enqueue. */
  pullRequestId: Scalars['ID'];
  /** Add the pull request to the front of the queue. */
  jump?: Maybe<Scalars['Boolean']>;
  /** The expected head OID of the pull request. */
  expectedHeadOid?: Maybe<Scalars['GitObjectID']>;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
};








/** Ordering options for enterprise administrator invitation connections */
export type EnterpriseAdministratorInvitationOrder = {
  /** The field to order enterprise administrator invitations by. */
  field: EnterpriseAdministratorInvitationOrderField;
  /** The ordering direction. */
  direction: OrderDirection;
};

/** Properties by which enterprise administrator invitation connections can be ordered. */
export type EnterpriseAdministratorInvitationOrderField =
  /** Order enterprise administrator member invitations by creation time */
  | 'CREATED_AT';

/** The possible administrator roles in an enterprise account. */
export type EnterpriseAdministratorRole =
  /** Represents an owner of the enterprise account. */
  | 'OWNER'
  /** Represents a billing manager of the enterprise account. */
  | 'BILLING_MANAGER';

/** The possible values for the enterprise allow private repository forking policy value. */
export type EnterpriseAllowPrivateRepositoryForkingPolicyValue =
  /** Members can fork a repository to an organization within this enterprise. */
  | 'ENTERPRISE_ORGANIZATIONS'
  /** Members can fork a repository only within the same organization (intra-org). */
  | 'SAME_ORGANIZATION'
  /** Members can fork a repository to their user account or within the same organization. */
  | 'SAME_ORGANIZATION_USER_ACCOUNTS'
  /** Members can fork a repository to their enterprise-managed user account or an organization inside this enterprise. */
  | 'ENTERPRISE_ORGANIZATIONS_USER_ACCOUNTS'
  /** Members can fork a repository to their user account. */
  | 'USER_ACCOUNTS'
  /** Members can fork a repository to their user account or an organization, either inside or outside of this enterprise. */
  | 'EVERYWHERE';



/** The possible values for the enterprise base repository permission setting. */
export type EnterpriseDefaultRepositoryPermissionSettingValue =
  /** Organizations in the enterprise choose base repository permissions for their members. */
  | 'NO_POLICY'
  /** Organization members will be able to clone, pull, push, and add new collaborators to all organization repositories. */
  | 'ADMIN'
  /** Organization members will be able to clone, pull, and push all organization repositories. */
  | 'WRITE'
  /** Organization members will be able to clone and pull all organization repositories. */
  | 'READ'
  /** Organization members will only be able to clone and pull public repositories. */
  | 'NONE';

/** The possible values for an enabled/disabled enterprise setting. */
export type EnterpriseEnabledDisabledSettingValue =
  /** The setting is enabled for organizations in the enterprise. */
  | 'ENABLED'
  /** The setting is disabled for organizations in the enterprise. */
  | 'DISABLED'
  /** There is no policy set for organizations in the enterprise. */
  | 'NO_POLICY';

/** The possible values for an enabled/no policy enterprise setting. */
export type EnterpriseEnabledSettingValue =
  /** The setting is enabled for organizations in the enterprise. */
  | 'ENABLED'
  /** There is no policy set for organizations in the enterprise. */
  | 'NO_POLICY';







/** Ordering options for enterprise member connections. */
export type EnterpriseMemberOrder = {
  /** The field to order enterprise members by. */
  field: EnterpriseMemberOrderField;
  /** The ordering direction. */
  direction: OrderDirection;
};

/** Properties by which enterprise member connections can be ordered. */
export type EnterpriseMemberOrderField =
  /** Order enterprise members by login */
  | 'LOGIN'
  /** Order enterprise members by creation time */
  | 'CREATED_AT';

/** The possible values for the enterprise members can create repositories setting. */
export type EnterpriseMembersCanCreateRepositoriesSettingValue =
  /** Organization administrators choose whether to allow members to create repositories. */
  | 'NO_POLICY'
  /** Members will be able to create public and private repositories. */
  | 'ALL'
  /** Members will be able to create only public repositories. */
  | 'PUBLIC'
  /** Members will be able to create only private repositories. */
  | 'PRIVATE'
  /** Members will not be able to create public or private repositories. */
  | 'DISABLED';

/** The possible values for the members can make purchases setting. */
export type EnterpriseMembersCanMakePurchasesSettingValue =
  /** The setting is enabled for organizations in the enterprise. */
  | 'ENABLED'
  /** The setting is disabled for organizations in the enterprise. */
  | 'DISABLED';
















/** Ordering options for Enterprise Server installation connections. */
export type EnterpriseServerInstallationOrder = {
  /** The field to order Enterprise Server installations by. */
  field: EnterpriseServerInstallationOrderField;
  /** The ordering direction. */
  direction: OrderDirection;
};

/** Properties by which Enterprise Server installation connections can be ordered. */
export type EnterpriseServerInstallationOrderField =
  /** Order Enterprise Server installations by host name */
  | 'HOST_NAME'
  /** Order Enterprise Server installations by customer name */
  | 'CUSTOMER_NAME'
  /** Order Enterprise Server installations by creation time */
  | 'CREATED_AT';







/** Ordering options for Enterprise Server user account email connections. */
export type EnterpriseServerUserAccountEmailOrder = {
  /** The field to order emails by. */
  field: EnterpriseServerUserAccountEmailOrderField;
  /** The ordering direction. */
  direction: OrderDirection;
};

/** Properties by which Enterprise Server user account email connections can be ordered. */
export type EnterpriseServerUserAccountEmailOrderField =
  /** Order emails by email */
  | 'EMAIL';

/** Ordering options for Enterprise Server user account connections. */
export type EnterpriseServerUserAccountOrder = {
  /** The field to order user accounts by. */
  field: EnterpriseServerUserAccountOrderField;
  /** The ordering direction. */
  direction: OrderDirection;
};

/** Properties by which Enterprise Server user account connections can be ordered. */
export type EnterpriseServerUserAccountOrderField =
  /** Order user accounts by login */
  | 'LOGIN'
  /** Order user accounts by creation time on the Enterprise Server installation */
  | 'REMOTE_CREATED_AT';




/** Ordering options for Enterprise Server user accounts upload connections. */
export type EnterpriseServerUserAccountsUploadOrder = {
  /** The field to order user accounts uploads by. */
  field: EnterpriseServerUserAccountsUploadOrderField;
  /** The ordering direction. */
  direction: OrderDirection;
};

/** Properties by which Enterprise Server user accounts upload connections can be ordered. */
export type EnterpriseServerUserAccountsUploadOrderField =
  /** Order user accounts uploads by creation time */
  | 'CREATED_AT';

/** Synchronization state of the Enterprise Server user accounts upload */
export type EnterpriseServerUserAccountsUploadSyncState =
  /** The synchronization of the upload is pending. */
  | 'PENDING'
  /** The synchronization of the upload succeeded. */
  | 'SUCCESS'
  /** The synchronization of the upload failed. */
  | 'FAILURE';


/** The possible roles for enterprise membership. */
export type EnterpriseUserAccountMembershipRole =
  /** The user is a member of an organization in the enterprise. */
  | 'MEMBER'
  /** The user is an owner of an organization in the enterprise. */
  | 'OWNER'
  /** The user is not an owner of the enterprise, and not a member or owner of any organizations in the enterprise; only for EMU-enabled enterprises. */
  | 'UNAFFILIATED';

/** The possible GitHub Enterprise deployments where this user can exist. */
export type EnterpriseUserDeployment =
  /** The user is part of a GitHub Enterprise Cloud deployment. */
  | 'CLOUD'
  /** The user is part of a GitHub Enterprise Server deployment. */
  | 'SERVER';










/** A command to add a file at the given path with the given contents as part of a commit.  Any existing file at that that path will be replaced. */
export type FileAddition = {
  /** The path in the repository where the file will be located */
  path: Scalars['String'];
  /** The base64 encoded contents of the file */
  contents: Scalars['Base64String'];
};

/**
 * A description of a set of changes to a file tree to be made as part of
 * a git commit, modeled as zero or more file `additions` and zero or more
 * file `deletions`.
 *
 * Both fields are optional; omitting both will produce a commit with no
 * file changes.
 *
 * `deletions` and `additions` describe changes to files identified
 * by their path in the git tree using unix-style path separators, i.e.
 * `/`.  The root of a git tree is an empty string, so paths are not
 * slash-prefixed.
 *
 * `path` values must be unique across all `additions` and `deletions`
 * provided.  Any duplication will result in a validation error.
 *
 * ### Encoding
 *
 * File contents must be provided in full for each `FileAddition`.
 *
 * The `contents` of a `FileAddition` must be encoded using RFC 4648
 * compliant base64, i.e. correct padding is required and no characters
 * outside the standard alphabet may be used.  Invalid base64
 * encoding will be rejected with a validation error.
 *
 * The encoded contents may be binary.
 *
 * For text files, no assumptions are made about the character encoding of
 * the file contents (after base64 decoding).  No charset transcoding or
 * line-ending normalization will be performed; it is the client's
 * responsibility to manage the character encoding of files they provide.
 * However, for maximum compatibility we recommend using UTF-8 encoding
 * and ensuring that all files in a repository use a consistent
 * line-ending convention (`\n` or `\r\n`), and that all files end
 * with a newline.
 *
 * ### Modeling file changes
 *
 * Each of the the five types of conceptual changes that can be made in a
 * git commit can be described using the `FileChanges` type as follows:
 *
 * 1. New file addition: create file `hello world\n` at path `docs/README.txt`:
 *
 *        {
 *          "additions" [
 *            {
 *              "path": "docs/README.txt",
 *              "contents": base64encode("hello world\n")
 *            }
 *          ]
 *        }
 *
 * 2. Existing file modification: change existing `docs/README.txt` to have new
 *    content `new content here\n`:
 *
 *        {
 *          "additions" [
 *            {
 *              "path": "docs/README.txt",
 *              "contents": base64encode("new content here\n")
 *            }
 *          ]
 *        }
 *
 * 3. Existing file deletion: remove existing file `docs/README.txt`.
 *    Note that the path is required to exist -- specifying a
 *    path that does not exist on the given branch will abort the
 *    commit and return an error.
 *
 *        {
 *          "deletions" [
 *            {
 *              "path": "docs/README.txt"
 *            }
 *          ]
 *        }
 *
 *
 * 4. File rename with no changes: rename `docs/README.txt` with
 *    previous content `hello world\n` to the same content at
 *    `newdocs/README.txt`:
 *
 *        {
 *          "deletions" [
 *            {
 *              "path": "docs/README.txt",
 *            }
 *          ],
 *          "additions" [
 *            {
 *              "path": "newdocs/README.txt",
 *              "contents": base64encode("hello world\n")
 *            }
 *          ]
 *        }
 *
 *
 * 5. File rename with changes: rename `docs/README.txt` with
 *    previous content `hello world\n` to a file at path
 *    `newdocs/README.txt` with content `new contents\n`:
 *
 *        {
 *          "deletions" [
 *            {
 *              "path": "docs/README.txt",
 *            }
 *          ],
 *          "additions" [
 *            {
 *              "path": "newdocs/README.txt",
 *              "contents": base64encode("new contents\n")
 *            }
 *          ]
 *        }
 */
export type FileChanges = {
  /** Files to delete. */
  deletions?: Maybe<Array<FileDeletion>>;
  /** File to add or change. */
  additions?: Maybe<Array<FileAddition>>;
};

/** A command to delete the file at the given path as part of a commit. */
export type FileDeletion = {
  /** The path to delete */
  path: Scalars['String'];
};

/** The possible viewed states of a file . */
export type FileViewedState =
  /** The file has new changes since last viewed. */
  | 'DISMISSED'
  /** The file has been marked as viewed. */
  | 'VIEWED'
  /** The file has not been marked as viewed. */
  | 'UNVIEWED';

/** Autogenerated input type of FollowOrganization */
export type FollowOrganizationInput = {
  /** ID of the organization to follow. */
  organizationId: Scalars['ID'];
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
};


/** Autogenerated input type of FollowUser */
export type FollowUserInput = {
  /** ID of the user to follow. */
  userId: Scalars['ID'];
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
};





/** The possible funding platforms for repository funding links. */
export type FundingPlatform =
  /** GitHub funding platform. */
  | 'GITHUB'
  /** Patreon funding platform. */
  | 'PATREON'
  /** Open Collective funding platform. */
  | 'OPEN_COLLECTIVE'
  /** Ko-fi funding platform. */
  | 'KO_FI'
  /** Tidelift funding platform. */
  | 'TIDELIFT'
  /** Community Bridge funding platform. */
  | 'COMMUNITY_BRIDGE'
  /** Liberapay funding platform. */
  | 'LIBERAPAY'
  /** IssueHunt funding platform. */
  | 'ISSUEHUNT'
  /** Otechie funding platform. */
  | 'OTECHIE'
  /** LFX Crowdfunding funding platform. */
  | 'LFX_CROWDFUNDING'
  /** Custom funding platform. */
  | 'CUSTOM';









/** Ordering options for gist connections */
export type GistOrder = {
  /** The field to order repositories by. */
  field: GistOrderField;
  /** The ordering direction. */
  direction: OrderDirection;
};

/** Properties by which gist connections can be ordered. */
export type GistOrderField =
  /** Order gists by creation time */
  | 'CREATED_AT'
  /** Order gists by update time */
  | 'UPDATED_AT'
  /** Order gists by push time */
  | 'PUSHED_AT';

/** The privacy of a Gist */
export type GistPrivacy =
  /** Public */
  | 'PUBLIC'
  /** Secret */
  | 'SECRET'
  /** Gists that are public and secret */
  | 'ALL';









/** The state of a Git signature. */
export type GitSignatureState =
  /** Valid signature and verified by GitHub */
  | 'VALID'
  /** Invalid signature */
  | 'INVALID'
  /** Malformed signature */
  | 'MALFORMED_SIG'
  /** Key used for signing not known to GitHub */
  | 'UNKNOWN_KEY'
  /** Invalid email used for signing */
  | 'BAD_EMAIL'
  /** Email used for signing unverified on GitHub */
  | 'UNVERIFIED_EMAIL'
  /** Email used for signing not known to GitHub */
  | 'NO_USER'
  /** Unknown signature type */
  | 'UNKNOWN_SIG_TYPE'
  /** Unsigned */
  | 'UNSIGNED'
  /** Internal error - the GPG verification service is unavailable at the moment */
  | 'GPGVERIFY_UNAVAILABLE'
  /** Internal error - the GPG verification service misbehaved */
  | 'GPGVERIFY_ERROR'
  /** The usage flags for the key that signed this don't allow signing */
  | 'NOT_SIGNING_KEY'
  /** Signing key expired */
  | 'EXPIRED_KEY'
  /** Valid signature, pending certificate revocation checking */
  | 'OCSP_PENDING'
  /** Valid signature, though certificate revocation check failed */
  | 'OCSP_ERROR'
  /** The signing certificate or its chain could not be verified */
  | 'BAD_CERT'
  /** One or more certificates in chain has been revoked */
  | 'OCSP_REVOKED';



/** Autogenerated input type of GrantEnterpriseOrganizationsMigratorRole */
export type GrantEnterpriseOrganizationsMigratorRoleInput = {
  /** The ID of the enterprise to which all organizations managed by it will be granted the migrator role. */
  enterpriseId: Scalars['ID'];
  /** The login of the user to grant the migrator role */
  login: Scalars['String'];
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
};


/** Autogenerated input type of GrantMigratorRole */
export type GrantMigratorRoleInput = {
  /** The ID of the organization that the user/team belongs to. */
  organizationId: Scalars['ID'];
  /** The user login or Team slug to grant the migrator role. */
  actor: Scalars['String'];
  /** Specifies the type of the actor, can be either USER or TEAM. */
  actorType: ActorType;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
};








/** The possible states in which authentication can be configured with an identity provider. */
export type IdentityProviderConfigurationState =
  /** Authentication with an identity provider is configured and enforced. */
  | 'ENFORCED'
  /** Authentication with an identity provider is configured but not enforced. */
  | 'CONFIGURED'
  /** Authentication with an identity provider is not configured. */
  | 'UNCONFIGURED';

/** Autogenerated input type of InviteEnterpriseAdmin */
export type InviteEnterpriseAdminInput = {
  /** The ID of the enterprise to which you want to invite an administrator. */
  enterpriseId: Scalars['ID'];
  /** The login of a user to invite as an administrator. */
  invitee?: Maybe<Scalars['String']>;
  /** The email of the person to invite as an administrator. */
  email?: Maybe<Scalars['String']>;
  /** The role of the administrator. */
  role?: Maybe<EnterpriseAdministratorRole>;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
};


/** The possible values for the IP allow list enabled setting. */
export type IpAllowListEnabledSettingValue =
  /** The setting is enabled for the owner. */
  | 'ENABLED'
  /** The setting is disabled for the owner. */
  | 'DISABLED';




/** Ordering options for IP allow list entry connections. */
export type IpAllowListEntryOrder = {
  /** The field to order IP allow list entries by. */
  field: IpAllowListEntryOrderField;
  /** The ordering direction. */
  direction: OrderDirection;
};

/** Properties by which IP allow list entry connections can be ordered. */
export type IpAllowListEntryOrderField =
  /** Order IP allow list entries by creation time. */
  | 'CREATED_AT'
  /** Order IP allow list entries by the allow list value. */
  | 'ALLOW_LIST_VALUE';

/** The possible values for the IP allow list configuration for installed GitHub Apps setting. */
export type IpAllowListForInstalledAppsEnabledSettingValue =
  /** The setting is enabled for the owner. */
  | 'ENABLED'
  /** The setting is disabled for the owner. */
  | 'DISABLED';



/** The possible state reasons of a closed issue. */
export type IssueClosedStateReason =
  /** An issue that has been closed as completed */
  | 'COMPLETED'
  /** An issue that has been closed as not planned */
  | 'NOT_PLANNED';




/** Ways in which lists of issue comments can be ordered upon return. */
export type IssueCommentOrder = {
  /** The field in which to order issue comments by. */
  field: IssueCommentOrderField;
  /** The direction in which to order issue comments by the specified field. */
  direction: OrderDirection;
};

/** Properties by which issue comment connections can be ordered. */
export type IssueCommentOrderField =
  /** Order issue comments by update time */
  | 'UPDATED_AT';




/** Ways in which to filter lists of issues. */
export type IssueFilters = {
  /** List issues assigned to given name. Pass in `null` for issues with no assigned user, and `*` for issues assigned to any user. */
  assignee?: Maybe<Scalars['String']>;
  /** List issues created by given name. */
  createdBy?: Maybe<Scalars['String']>;
  /** List issues where the list of label names exist on the issue. */
  labels?: Maybe<Array<Scalars['String']>>;
  /** List issues where the given name is mentioned in the issue. */
  mentioned?: Maybe<Scalars['String']>;
  /** List issues by given milestone argument. If an string representation of an integer is passed, it should refer to a milestone by its database ID. Pass in `null` for issues with no milestone, and `*` for issues that are assigned to any milestone. */
  milestone?: Maybe<Scalars['String']>;
  /** List issues by given milestone argument. If an string representation of an integer is passed, it should refer to a milestone by its number field. Pass in `null` for issues with no milestone, and `*` for issues that are assigned to any milestone. */
  milestoneNumber?: Maybe<Scalars['String']>;
  /** List issues that have been updated at or after the given date. */
  since?: Maybe<Scalars['DateTime']>;
  /** List issues filtered by the list of states given. */
  states?: Maybe<Array<IssueState>>;
  /** List issues subscribed to by viewer. */
  viewerSubscribed?: Maybe<Scalars['Boolean']>;
};


/** Ways in which lists of issues can be ordered upon return. */
export type IssueOrder = {
  /** The field in which to order issues by. */
  field: IssueOrderField;
  /** The direction in which to order issues by the specified field. */
  direction: OrderDirection;
};

/** Properties by which issue connections can be ordered. */
export type IssueOrderField =
  /** Order issues by creation time */
  | 'CREATED_AT'
  /** Order issues by update time */
  | 'UPDATED_AT'
  /** Order issues by comment count */
  | 'COMMENTS';

/** The possible states of an issue. */
export type IssueState =
  /** An issue that is still open */
  | 'OPEN'
  /** An issue that has been closed */
  | 'CLOSED';

/** The possible state reasons of an issue. */
export type IssueStateReason =
  /** An issue that has been reopened */
  | 'REOPENED'
  /** An issue that has been closed as not planned */
  | 'NOT_PLANNED'
  /** An issue that has been closed as completed */
  | 'COMPLETED';








/** The possible item types found in a timeline. */
export type IssueTimelineItemsItemType =
  /** Represents a comment on an Issue. */
  | 'ISSUE_COMMENT'
  /** Represents a mention made by one issue or pull request to another. */
  | 'CROSS_REFERENCED_EVENT'
  /** Represents a 'added_to_project' event on a given issue or pull request. */
  | 'ADDED_TO_PROJECT_EVENT'
  /** Represents an 'assigned' event on any assignable object. */
  | 'ASSIGNED_EVENT'
  /** Represents a 'closed' event on any `Closable`. */
  | 'CLOSED_EVENT'
  /** Represents a 'comment_deleted' event on a given issue or pull request. */
  | 'COMMENT_DELETED_EVENT'
  /** Represents a 'connected' event on a given issue or pull request. */
  | 'CONNECTED_EVENT'
  /** Represents a 'converted_note_to_issue' event on a given issue or pull request. */
  | 'CONVERTED_NOTE_TO_ISSUE_EVENT'
  /** Represents a 'converted_to_discussion' event on a given issue. */
  | 'CONVERTED_TO_DISCUSSION_EVENT'
  /** Represents a 'demilestoned' event on a given issue or pull request. */
  | 'DEMILESTONED_EVENT'
  /** Represents a 'disconnected' event on a given issue or pull request. */
  | 'DISCONNECTED_EVENT'
  /** Represents a 'labeled' event on a given issue or pull request. */
  | 'LABELED_EVENT'
  /** Represents a 'locked' event on a given issue or pull request. */
  | 'LOCKED_EVENT'
  /** Represents a 'marked_as_duplicate' event on a given issue or pull request. */
  | 'MARKED_AS_DUPLICATE_EVENT'
  /** Represents a 'mentioned' event on a given issue or pull request. */
  | 'MENTIONED_EVENT'
  /** Represents a 'milestoned' event on a given issue or pull request. */
  | 'MILESTONED_EVENT'
  /** Represents a 'moved_columns_in_project' event on a given issue or pull request. */
  | 'MOVED_COLUMNS_IN_PROJECT_EVENT'
  /** Represents a 'pinned' event on a given issue or pull request. */
  | 'PINNED_EVENT'
  /** Represents a 'referenced' event on a given `ReferencedSubject`. */
  | 'REFERENCED_EVENT'
  /** Represents a 'removed_from_project' event on a given issue or pull request. */
  | 'REMOVED_FROM_PROJECT_EVENT'
  /** Represents a 'renamed' event on a given issue or pull request */
  | 'RENAMED_TITLE_EVENT'
  /** Represents a 'reopened' event on any `Closable`. */
  | 'REOPENED_EVENT'
  /** Represents a 'subscribed' event on a given `Subscribable`. */
  | 'SUBSCRIBED_EVENT'
  /** Represents a 'transferred' event on a given issue or pull request. */
  | 'TRANSFERRED_EVENT'
  /** Represents an 'unassigned' event on any assignable object. */
  | 'UNASSIGNED_EVENT'
  /** Represents an 'unlabeled' event on a given issue or pull request. */
  | 'UNLABELED_EVENT'
  /** Represents an 'unlocked' event on a given issue or pull request. */
  | 'UNLOCKED_EVENT'
  /** Represents a 'user_blocked' event on a given user. */
  | 'USER_BLOCKED_EVENT'
  /** Represents an 'unmarked_as_duplicate' event on a given issue or pull request. */
  | 'UNMARKED_AS_DUPLICATE_EVENT'
  /** Represents an 'unpinned' event on a given issue or pull request. */
  | 'UNPINNED_EVENT'
  /** Represents an 'unsubscribed' event on a given `Subscribable`. */
  | 'UNSUBSCRIBED_EVENT';





/** Ways in which lists of labels can be ordered upon return. */
export type LabelOrder = {
  /** The field in which to order labels by. */
  field: LabelOrderField;
  /** The direction in which to order labels by the specified field. */
  direction: OrderDirection;
};

/** Properties by which label connections can be ordered. */
export type LabelOrderField =
  /** Order labels by name  */
  | 'NAME'
  /** Order labels by creation time */
  | 'CREATED_AT';






/** Ordering options for language connections. */
export type LanguageOrder = {
  /** The field to order languages by. */
  field: LanguageOrderField;
  /** The ordering direction. */
  direction: OrderDirection;
};

/** Properties by which language connections can be ordered. */
export type LanguageOrderField =
  /** Order languages by the size of all files containing the language */
  | 'SIZE';



/** Autogenerated input type of LinkProjectV2ToRepository */
export type LinkProjectV2ToRepositoryInput = {
  /** The ID of the project to link to the repository. */
  projectId: Scalars['ID'];
  /** The ID of the repository to link to the project. */
  repositoryId: Scalars['ID'];
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
};


/** Autogenerated input type of LinkProjectV2ToTeam */
export type LinkProjectV2ToTeamInput = {
  /** The ID of the project to link to the team. */
  projectId: Scalars['ID'];
  /** The ID of the team to link to the project. */
  teamId: Scalars['ID'];
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
};


/** Autogenerated input type of LinkRepositoryToProject */
export type LinkRepositoryToProjectInput = {
  /** The ID of the Project to link to a Repository */
  projectId: Scalars['ID'];
  /** The ID of the Repository to link to a Project. */
  repositoryId: Scalars['ID'];
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
};





/** Autogenerated input type of LockLockable */
export type LockLockableInput = {
  /** ID of the item to be locked. */
  lockableId: Scalars['ID'];
  /** A reason for why the item will be locked. */
  lockReason?: Maybe<LockReason>;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
};


/** The possible reasons that an issue or pull request was locked. */
export type LockReason =
  /** The issue or pull request was locked because the conversation was off-topic. */
  | 'OFF_TOPIC'
  /** The issue or pull request was locked because the conversation was too heated. */
  | 'TOO_HEATED'
  /** The issue or pull request was locked because the conversation was resolved. */
  | 'RESOLVED'
  /** The issue or pull request was locked because the conversation was spam. */
  | 'SPAM';






/** Ordering options for mannequins. */
export type MannequinOrder = {
  /** The field to order mannequins by. */
  field: MannequinOrderField;
  /** The ordering direction. */
  direction: OrderDirection;
};

/** Properties by which mannequins can be ordered. */
export type MannequinOrderField =
  /** Order mannequins alphabetically by their source login. */
  | 'LOGIN'
  /** Order mannequins why when they were created. */
  | 'CREATED_AT';

/** Autogenerated input type of MarkDiscussionCommentAsAnswer */
export type MarkDiscussionCommentAsAnswerInput = {
  /** The Node ID of the discussion comment to mark as an answer. */
  id: Scalars['ID'];
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
};


/** Autogenerated input type of MarkFileAsViewed */
export type MarkFileAsViewedInput = {
  /** The Node ID of the pull request. */
  pullRequestId: Scalars['ID'];
  /** The path of the file to mark as viewed */
  path: Scalars['String'];
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
};


/** Autogenerated input type of MarkPullRequestReadyForReview */
export type MarkPullRequestReadyForReviewInput = {
  /** ID of the pull request to be marked as ready for review. */
  pullRequestId: Scalars['ID'];
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
};












/** Autogenerated input type of MergeBranch */
export type MergeBranchInput = {
  /** The Node ID of the Repository containing the base branch that will be modified. */
  repositoryId: Scalars['ID'];
  /** The name of the base branch that the provided head will be merged into. */
  base: Scalars['String'];
  /** The head to merge into the base branch. This can be a branch name or a commit GitObjectID. */
  head: Scalars['String'];
  /** Message to use for the merge commit. If omitted, a default will be used. */
  commitMessage?: Maybe<Scalars['String']>;
  /** The email address to associate with this commit. */
  authorEmail?: Maybe<Scalars['String']>;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
};


/** The possible default commit messages for merges. */
export type MergeCommitMessage =
  /** Default to the pull request's title. */
  | 'PR_TITLE'
  /** Default to the pull request's body. */
  | 'PR_BODY'
  /** Default to a blank commit message. */
  | 'BLANK';

/** The possible default commit titles for merges. */
export type MergeCommitTitle =
  /** Default to the pull request's title. */
  | 'PR_TITLE'
  /** Default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name). */
  | 'MERGE_MESSAGE';

/** Autogenerated input type of MergePullRequest */
export type MergePullRequestInput = {
  /** ID of the pull request to be merged. */
  pullRequestId: Scalars['ID'];
  /** Commit headline to use for the merge commit; if omitted, a default message will be used. */
  commitHeadline?: Maybe<Scalars['String']>;
  /** Commit body to use for the merge commit; if omitted, a default message will be used */
  commitBody?: Maybe<Scalars['String']>;
  /** OID that the pull request head ref must match to allow merge; if omitted, no check is performed. */
  expectedHeadOid?: Maybe<Scalars['GitObjectID']>;
  /** The merge method to use. If omitted, defaults to 'MERGE' */
  mergeMethod?: Maybe<PullRequestMergeMethod>;
  /** The email address to associate with this merge. */
  authorEmail?: Maybe<Scalars['String']>;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
};







/** The possible states for a merge queue entry. */
export type MergeQueueEntryState =
  /** The entry is currently queued. */
  | 'QUEUED'
  /** The entry is currently waiting for checks to pass. */
  | 'AWAITING_CHECKS'
  /** The entry is currently mergeable. */
  | 'MERGEABLE'
  /** The entry is currently unmergeable. */
  | 'UNMERGEABLE'
  /** The entry is currently locked. */
  | 'LOCKED';

/** The possible merging strategies for a merge queue. */
export type MergeQueueMergingStrategy =
  /** Entries only allowed to merge if they are passing. */
  | 'ALLGREEN'
  /** Failing Entires are allowed to merge if they are with a passing entry. */
  | 'HEADGREEN';

/** Whether or not a PullRequest can be merged. */
export type MergeableState =
  /** The pull request can be merged. */
  | 'MERGEABLE'
  /** The pull request cannot be merged due to merge conflicts. */
  | 'CONFLICTING'
  /** The mergeability of the pull request is still being calculated. */
  | 'UNKNOWN';




/** Represents the different GitHub Enterprise Importer (GEI) migration sources. */
export type MigrationSourceType =
  /** An Azure DevOps migration source. */
  | 'AZURE_DEVOPS'
  /** A Bitbucket Server migration source. */
  | 'BITBUCKET_SERVER'
  /** A GitHub Migration API source. */
  | 'GITHUB_ARCHIVE';

/** The GitHub Enterprise Importer (GEI) migration state. */
export type MigrationState =
  /** The migration has not started. */
  | 'NOT_STARTED'
  /** The migration has been queued. */
  | 'QUEUED'
  /** The migration is in progress. */
  | 'IN_PROGRESS'
  /** The migration has succeeded. */
  | 'SUCCEEDED'
  /** The migration has failed. */
  | 'FAILED'
  /** The migration needs to have its credentials validated. */
  | 'PENDING_VALIDATION'
  /** The migration has invalid credentials. */
  | 'FAILED_VALIDATION';





/** Ordering options for milestone connections. */
export type MilestoneOrder = {
  /** The field to order milestones by. */
  field: MilestoneOrderField;
  /** The ordering direction. */
  direction: OrderDirection;
};

/** Properties by which milestone connections can be ordered. */
export type MilestoneOrderField =
  /** Order milestones by when they are due. */
  | 'DUE_DATE'
  /** Order milestones by when they were created. */
  | 'CREATED_AT'
  /** Order milestones by when they were last updated. */
  | 'UPDATED_AT'
  /** Order milestones by their number. */
  | 'NUMBER';

/** The possible states of a milestone. */
export type MilestoneState =
  /** A milestone that is still open. */
  | 'OPEN'
  /** A milestone that has been closed. */
  | 'CLOSED';



/** Autogenerated input type of MinimizeComment */
export type MinimizeCommentInput = {
  /** The Node ID of the subject to modify. */
  subjectId: Scalars['ID'];
  /** The classification of comment */
  classifier: ReportedContentClassifiers;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
};


/** Autogenerated input type of MoveProjectCard */
export type MoveProjectCardInput = {
  /** The id of the card to move. */
  cardId: Scalars['ID'];
  /** The id of the column to move it into. */
  columnId: Scalars['ID'];
  /** Place the new card after the card with this id. Pass null to place it at the top. */
  afterCardId?: Maybe<Scalars['ID']>;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
};


/** Autogenerated input type of MoveProjectColumn */
export type MoveProjectColumnInput = {
  /** The id of the column to move. */
  columnId: Scalars['ID'];
  /** Place the new column after the column with this id. Pass null to place it at the front. */
  afterColumnId?: Maybe<Scalars['ID']>;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
};





/** The possible values for the notification restriction setting. */
export type NotificationRestrictionSettingValue =
  /** The setting is enabled for the owner. */
  | 'ENABLED'
  /** The setting is disabled for the owner. */
  | 'DISABLED';


/** The OIDC identity provider type */
export type OidcProviderType =
  /** Azure Active Directory */
  | 'AAD';



/** The state of an OAuth Application when it was created. */
export type OauthApplicationCreateAuditEntryState =
  /** The OAuth Application was active and allowed to have OAuth Accesses. */
  | 'ACTIVE'
  /** The OAuth Application was suspended from generating OAuth Accesses due to abuse or security concerns. */
  | 'SUSPENDED'
  /** The OAuth Application was in the process of being deleted. */
  | 'PENDING_DELETION';

/** The corresponding operation type for the action */
export type OperationType =
  /** An existing resource was accessed */
  | 'ACCESS'
  /** A resource performed an authentication event */
  | 'AUTHENTICATION'
  /** A new resource was created */
  | 'CREATE'
  /** An existing resource was modified */
  | 'MODIFY'
  /** An existing resource was removed */
  | 'REMOVE'
  /** An existing resource was restored */
  | 'RESTORE'
  /** An existing resource was transferred between multiple resources */
  | 'TRANSFER';

/** Possible directions in which to order a list of items when provided an `orderBy` argument. */
export type OrderDirection =
  /** Specifies an ascending order for a given `orderBy` argument. */
  | 'ASC'
  /** Specifies a descending order for a given `orderBy` argument. */
  | 'DESC';



/** The permissions available to members on an Organization. */
export type OrgAddMemberAuditEntryPermission =
  /** Can read and clone repositories. */
  | 'READ'
  /** Can read, clone, push, and add collaborators to repositories. */
  | 'ADMIN';





/** The billing plans available for organizations. */
export type OrgCreateAuditEntryBillingPlan =
  /** Free Plan */
  | 'FREE'
  /** Team Plan */
  | 'BUSINESS'
  /** Enterprise Cloud Plan */
  | 'BUSINESS_PLUS'
  /** Legacy Unlimited Plan */
  | 'UNLIMITED'
  /** Tiered Per Seat Plan */
  | 'TIERED_PER_SEAT';







/** Ordering options for an organization's enterprise owner connections. */
export type OrgEnterpriseOwnerOrder = {
  /** The field to order enterprise owners by. */
  field: OrgEnterpriseOwnerOrderField;
  /** The ordering direction. */
  direction: OrderDirection;
};

/** Properties by which enterprise owners can be ordered. */
export type OrgEnterpriseOwnerOrderField =
  /** Order enterprise owners by login. */
  | 'LOGIN';







/** The reason a billing manager was removed from an Organization. */
export type OrgRemoveBillingManagerAuditEntryReason =
  /** The organization required 2FA of its billing managers and this user did not have 2FA enabled. */
  | 'TWO_FACTOR_REQUIREMENT_NON_COMPLIANCE'
  /** SAML external identity missing */
  | 'SAML_EXTERNAL_IDENTITY_MISSING'
  /** SAML SSO enforcement requires an external identity */
  | 'SAML_SSO_ENFORCEMENT_REQUIRES_EXTERNAL_IDENTITY';


/** The type of membership a user has with an Organization. */
export type OrgRemoveMemberAuditEntryMembershipType =
  /** A suspended member. */
  | 'SUSPENDED'
  /** A direct member is a user that is a member of the Organization. */
  | 'DIRECT_MEMBER'
  /** Organization administrators have full access and can change several settings, including the names of repositories that belong to the Organization and Owners team membership. In addition, organization admins can delete the organization and all of its repositories. */
  | 'ADMIN'
  /** A billing manager is a user who manages the billing settings for the Organization, such as updating payment information. */
  | 'BILLING_MANAGER'
  /** An unaffiliated collaborator is a person who is not a member of the Organization and does not have access to any repositories in the Organization. */
  | 'UNAFFILIATED'
  /** An outside collaborator is a person who isn't explicitly a member of the Organization, but who has Read, Write, or Admin permissions to one or more repositories in the organization. */
  | 'OUTSIDE_COLLABORATOR';

/** The reason a member was removed from an Organization. */
export type OrgRemoveMemberAuditEntryReason =
  /** The organization required 2FA of its billing managers and this user did not have 2FA enabled. */
  | 'TWO_FACTOR_REQUIREMENT_NON_COMPLIANCE'
  /** SAML external identity missing */
  | 'SAML_EXTERNAL_IDENTITY_MISSING'
  /** SAML SSO enforcement requires an external identity */
  | 'SAML_SSO_ENFORCEMENT_REQUIRES_EXTERNAL_IDENTITY'
  /** User account has been deleted */
  | 'USER_ACCOUNT_DELETED'
  /** User was removed from organization during account recovery */
  | 'TWO_FACTOR_ACCOUNT_RECOVERY';


/** The type of membership a user has with an Organization. */
export type OrgRemoveOutsideCollaboratorAuditEntryMembershipType =
  /** An outside collaborator is a person who isn't explicitly a member of the Organization, but who has Read, Write, or Admin permissions to one or more repositories in the organization. */
  | 'OUTSIDE_COLLABORATOR'
  /** An unaffiliated collaborator is a person who is not a member of the Organization and does not have access to any repositories in the organization. */
  | 'UNAFFILIATED'
  /** A billing manager is a user who manages the billing settings for the Organization, such as updating payment information. */
  | 'BILLING_MANAGER';

/** The reason an outside collaborator was removed from an Organization. */
export type OrgRemoveOutsideCollaboratorAuditEntryReason =
  /** The organization required 2FA of its billing managers and this user did not have 2FA enabled. */
  | 'TWO_FACTOR_REQUIREMENT_NON_COMPLIANCE'
  /** SAML external identity missing */
  | 'SAML_EXTERNAL_IDENTITY_MISSING';








/** The default permission a repository can have in an Organization. */
export type OrgUpdateDefaultRepositoryPermissionAuditEntryPermission =
  /** Can read and clone repositories. */
  | 'READ'
  /** Can read, clone and push to repositories. */
  | 'WRITE'
  /** Can read, clone, push, and add collaborators to repositories. */
  | 'ADMIN'
  /** No default permission value. */
  | 'NONE';


/** The permissions available to members on an Organization. */
export type OrgUpdateMemberAuditEntryPermission =
  /** Can read and clone repositories. */
  | 'READ'
  /** Can read, clone, push, and add collaborators to repositories. */
  | 'ADMIN';


/** The permissions available for repository creation on an Organization. */
export type OrgUpdateMemberRepositoryCreationPermissionAuditEntryVisibility =
  /** All organization members are restricted from creating any repositories. */
  | 'ALL'
  /** All organization members are restricted from creating public repositories. */
  | 'PUBLIC'
  /** All organization members are allowed to create any repositories. */
  | 'NONE'
  /** All organization members are restricted from creating private repositories. */
  | 'PRIVATE'
  /** All organization members are restricted from creating internal repositories. */
  | 'INTERNAL'
  /** All organization members are restricted from creating public or internal repositories. */
  | 'PUBLIC_INTERNAL'
  /** All organization members are restricted from creating private or internal repositories. */
  | 'PRIVATE_INTERNAL'
  /** All organization members are restricted from creating public or private repositories. */
  | 'PUBLIC_PRIVATE';















/** The possible organization invitation roles. */
export type OrganizationInvitationRole =
  /** The user is invited to be a direct member of the organization. */
  | 'DIRECT_MEMBER'
  /** The user is invited to be an admin of the organization. */
  | 'ADMIN'
  /** The user is invited to be a billing manager of the organization. */
  | 'BILLING_MANAGER'
  /** The user's previous role will be reinstated. */
  | 'REINSTATE';

/** The possible organization invitation sources. */
export type OrganizationInvitationSource =
  /** The invitation was sent before this feature was added */
  | 'UNKNOWN'
  /** The invitation was created from the web interface or from API */
  | 'MEMBER'
  /** The invitation was created from SCIM */
  | 'SCIM';

/** The possible organization invitation types. */
export type OrganizationInvitationType =
  /** The invitation was to an existing user. */
  | 'USER'
  /** The invitation was to an email address. */
  | 'EMAIL';



/** The possible roles within an organization for its members. */
export type OrganizationMemberRole =
  /** The user is a member of the organization. */
  | 'MEMBER'
  /** The user is an administrator of the organization. */
  | 'ADMIN';

/** The possible values for the members can create repositories setting on an organization. */
export type OrganizationMembersCanCreateRepositoriesSettingValue =
  /** Members will be able to create public and private repositories. */
  | 'ALL'
  /** Members will be able to create only private repositories. */
  | 'PRIVATE'
  /** Members will be able to create only internal repositories. */
  | 'INTERNAL'
  /** Members will not be able to create public or private repositories. */
  | 'DISABLED';


/** The Octoshift Organization migration state. */
export type OrganizationMigrationState =
  /** The Octoshift migration has not started. */
  | 'NOT_STARTED'
  /** The Octoshift migration has been queued. */
  | 'QUEUED'
  /** The Octoshift migration is in progress. */
  | 'IN_PROGRESS'
  /** The Octoshift migration is performing pre repository migrations. */
  | 'PRE_REPO_MIGRATION'
  /** The Octoshift org migration is performing repository migrations. */
  | 'REPO_MIGRATION'
  /** The Octoshift migration is performing post repository migrations. */
  | 'POST_REPO_MIGRATION'
  /** The Octoshift migration has succeeded. */
  | 'SUCCEEDED'
  /** The Octoshift migration has failed. */
  | 'FAILED';


/** Ordering options for organization connections. */
export type OrganizationOrder = {
  /** The field to order organizations by. */
  field: OrganizationOrderField;
  /** The ordering direction. */
  direction: OrderDirection;
};

/** Properties by which organization connections can be ordered. */
export type OrganizationOrderField =
  /** Order organizations by creation time */
  | 'CREATED_AT'
  /** Order organizations by login */
  | 'LOGIN';









/** Ways in which lists of package files can be ordered upon return. */
export type PackageFileOrder = {
  /** The field in which to order package files by. */
  field?: Maybe<PackageFileOrderField>;
  /** The direction in which to order package files by the specified field. */
  direction?: Maybe<OrderDirection>;
};

/** Properties by which package file connections can be ordered. */
export type PackageFileOrderField =
  /** Order package files by creation time */
  | 'CREATED_AT';

/** Ways in which lists of packages can be ordered upon return. */
export type PackageOrder = {
  /** The field in which to order packages by. */
  field?: Maybe<PackageOrderField>;
  /** The direction in which to order packages by the specified field. */
  direction?: Maybe<OrderDirection>;
};

/** Properties by which package connections can be ordered. */
export type PackageOrderField =
  /** Order packages by creation time */
  | 'CREATED_AT';




/** The possible types of a package. */
export type PackageType =
  /** An npm package. */
  | 'NPM'
  /** A rubygems package. */
  | 'RUBYGEMS'
  /** A maven package. */
  | 'MAVEN'
  /** A docker image. */
  | 'DOCKER'
  /** A debian package. */
  | 'DEBIAN'
  /** A nuget package. */
  | 'NUGET'
  /** A python package. */
  | 'PYPI';




/** Ways in which lists of package versions can be ordered upon return. */
export type PackageVersionOrder = {
  /** The field in which to order package versions by. */
  field?: Maybe<PackageVersionOrderField>;
  /** The direction in which to order package versions by the specified field. */
  direction?: Maybe<OrderDirection>;
};

/** Properties by which package version connections can be ordered. */
export type PackageVersionOrderField =
  /** Order package versions by creation time */
  | 'CREATED_AT';



/** The possible types of patch statuses. */
export type PatchStatus =
  /** The file was added. Git status 'A'. */
  | 'ADDED'
  /** The file was deleted. Git status 'D'. */
  | 'DELETED'
  /** The file was renamed. Git status 'R'. */
  | 'RENAMED'
  /** The file was copied. Git status 'C'. */
  | 'COPIED'
  /** The file's contents were changed. Git status 'M'. */
  | 'MODIFIED'
  /** The file's type was changed. Git status 'T'. */
  | 'CHANGED';



/** Autogenerated input type of PinIssue */
export type PinIssueInput = {
  /** The ID of the issue to be pinned */
  issueId: Scalars['ID'];
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
};





/** Represents items that can be pinned to a profile page or dashboard. */
export type PinnableItemType =
  /** A repository. */
  | 'REPOSITORY'
  /** A gist. */
  | 'GIST'
  /** An issue. */
  | 'ISSUE'
  /** A project. */
  | 'PROJECT'
  /** A pull request. */
  | 'PULL_REQUEST'
  /** A user. */
  | 'USER'
  /** An organization. */
  | 'ORGANIZATION'
  /** A team. */
  | 'TEAM';




/** Preconfigured gradients that may be used to style discussions pinned within a repository. */
export type PinnedDiscussionGradient =
  /** A gradient of red to orange */
  | 'RED_ORANGE'
  /** A gradient of blue to mint */
  | 'BLUE_MINT'
  /** A gradient of blue to purple */
  | 'BLUE_PURPLE'
  /** A gradient of pink to blue */
  | 'PINK_BLUE'
  /** A gradient of purple to coral */
  | 'PURPLE_CORAL';

/** Preconfigured background patterns that may be used to style discussions pinned within a repository. */
export type PinnedDiscussionPattern =
  /** A solid dot pattern */
  | 'DOT_FILL'
  /** A plus sign pattern */
  | 'PLUS'
  /** A lightning bolt pattern */
  | 'ZAP'
  /** An upward-facing chevron pattern */
  | 'CHEVRON_UP'
  /** A hollow dot pattern */
  | 'DOT'
  /** A heart pattern */
  | 'HEART_FILL';












/** The possible archived states of a project card. */
export type ProjectCardArchivedState =
  /** A project card that is archived */
  | 'ARCHIVED'
  /** A project card that is not archived */
  | 'NOT_ARCHIVED';




/** Various content states of a ProjectCard */
export type ProjectCardState =
  /** The card has content only. */
  | 'CONTENT_ONLY'
  /** The card has a note only. */
  | 'NOTE_ONLY'
  /** The card is redacted. */
  | 'REDACTED';




/** The semantic purpose of the column - todo, in progress, or done. */
export type ProjectColumnPurpose =
  /** The column contains cards still to be worked on */
  | 'TODO'
  /** The column contains cards which are currently being worked on */
  | 'IN_PROGRESS'
  /** The column contains cards which are complete */
  | 'DONE';



/** Ways in which lists of projects can be ordered upon return. */
export type ProjectOrder = {
  /** The field in which to order projects by. */
  field: ProjectOrderField;
  /** The direction in which to order projects by the specified field. */
  direction: OrderDirection;
};

/** Properties by which project connections can be ordered. */
export type ProjectOrderField =
  /** Order projects by creation time */
  | 'CREATED_AT'
  /** Order projects by update time */
  | 'UPDATED_AT'
  /** Order projects by name */
  | 'NAME';



/** State of the project; either 'open' or 'closed' */
export type ProjectState =
  /** The project is open. */
  | 'OPEN'
  /** The project is closed. */
  | 'CLOSED';

/** GitHub-provided templates for Projects */
export type ProjectTemplate =
  /** Create a board with columns for To do, In progress and Done. */
  | 'BASIC_KANBAN'
  /** Create a board with v2 triggers to automatically move cards across To do, In progress and Done columns. */
  | 'AUTOMATED_KANBAN_V2'
  /** Create a board with triggers to automatically move cards across columns with review automation. */
  | 'AUTOMATED_REVIEWS_KANBAN'
  /** Create a board to triage and prioritize bugs with To do, priority, and Done columns. */
  | 'BUG_TRIAGE';



/** The type of a project field. */
export type ProjectV2CustomFieldType =
  /** Text */
  | 'TEXT'
  /** Single Select */
  | 'SINGLE_SELECT'
  /** Number */
  | 'NUMBER'
  /** Date */
  | 'DATE';









/** Ordering options for project v2 field connections */
export type ProjectV2FieldOrder = {
  /** The field to order the project v2 fields by. */
  field: ProjectV2FieldOrderField;
  /** The ordering direction. */
  direction: OrderDirection;
};

/** Properties by which project v2 field connections can be ordered. */
export type ProjectV2FieldOrderField =
  /** Order project v2 fields by position */
  | 'POSITION'
  /** Order project v2 fields by creation time */
  | 'CREATED_AT'
  /** Order project v2 fields by name */
  | 'NAME';

/** The type of a project field. */
export type ProjectV2FieldType =
  /** Assignees */
  | 'ASSIGNEES'
  /** Linked Pull Requests */
  | 'LINKED_PULL_REQUESTS'
  /** Reviewers */
  | 'REVIEWERS'
  /** Labels */
  | 'LABELS'
  /** Milestone */
  | 'MILESTONE'
  /** Repository */
  | 'REPOSITORY'
  /** Title */
  | 'TITLE'
  /** Text */
  | 'TEXT'
  /** Single Select */
  | 'SINGLE_SELECT'
  /** Number */
  | 'NUMBER'
  /** Date */
  | 'DATE'
  /** Iteration */
  | 'ITERATION'
  /** Tracks */
  | 'TRACKS'
  /** Tracked by */
  | 'TRACKED_BY';

/** The values that can be used to update a field of an item inside a Project. Only 1 value can be updated at a time. */
export type ProjectV2FieldValue = {
  /** The text to set on the field. */
  text?: Maybe<Scalars['String']>;
  /** The number to set on the field. */
  number?: Maybe<Scalars['Float']>;
  /** The ISO 8601 date to set on the field. */
  date?: Maybe<Scalars['Date']>;
  /** The id of the single select option to set on the field. */
  singleSelectOptionId?: Maybe<Scalars['String']>;
  /** The id of the iteration to set on the field. */
  iterationId?: Maybe<Scalars['String']>;
};

/** Ways in which to filter lists of projects. */
export type ProjectV2Filters = {
  /** List project v2 filtered by the state given. */
  state?: Maybe<ProjectV2State>;
};




















/** Ordering options for project v2 item field value connections */
export type ProjectV2ItemFieldValueOrder = {
  /** The field to order the project v2 item field values by. */
  field: ProjectV2ItemFieldValueOrderField;
  /** The ordering direction. */
  direction: OrderDirection;
};

/** Properties by which project v2 item field value connections can be ordered. */
export type ProjectV2ItemFieldValueOrderField =
  /** Order project v2 item field values by the their position in the project */
  | 'POSITION';

/** Ordering options for project v2 item connections */
export type ProjectV2ItemOrder = {
  /** The field to order the project v2 items by. */
  field: ProjectV2ItemOrderField;
  /** The ordering direction. */
  direction: OrderDirection;
};

/** Properties by which project v2 item connections can be ordered. */
export type ProjectV2ItemOrderField =
  /** Order project v2 items by the their position in the project */
  | 'POSITION';

/** The type of a project item. */
export type ProjectV2ItemType =
  /** Issue */
  | 'ISSUE'
  /** Pull Request */
  | 'PULL_REQUEST'
  /** Draft Issue */
  | 'DRAFT_ISSUE'
  /** Redacted Item */
  | 'REDACTED';




/** Ways in which lists of projects can be ordered upon return. */
export type ProjectV2Order = {
  /** The field in which to order projects by. */
  field: ProjectV2OrderField;
  /** The direction in which to order projects by the specified field. */
  direction: OrderDirection;
};

/** Properties by which projects can be ordered. */
export type ProjectV2OrderField =
  /** The project's title */
  | 'TITLE'
  /** The project's number */
  | 'NUMBER'
  /** The project's date and time of update */
  | 'UPDATED_AT'
  /** The project's date and time of creation */
  | 'CREATED_AT';





/** The display color of a single-select field option. */
export type ProjectV2SingleSelectFieldOptionColor =
  /** GRAY */
  | 'GRAY'
  /** BLUE */
  | 'BLUE'
  /** GREEN */
  | 'GREEN'
  /** YELLOW */
  | 'YELLOW'
  /** ORANGE */
  | 'ORANGE'
  /** RED */
  | 'RED'
  /** PINK */
  | 'PINK'
  /** PURPLE */
  | 'PURPLE';

/** Represents a single select field option */
export type ProjectV2SingleSelectFieldOptionInput = {
  /** The name of the option */
  name: Scalars['String'];
  /** The display color of the option */
  color: ProjectV2SingleSelectFieldOptionColor;
  /** The description text of the option */
  description: Scalars['String'];
};







/** The possible states of a project v2. */
export type ProjectV2State =
  /** A project v2 that is still open */
  | 'OPEN'
  /** A project v2 that has been closed */
  | 'CLOSED';




/** The layout of a project v2 view. */
export type ProjectV2ViewLayout =
  /** Board layout */
  | 'BOARD_LAYOUT'
  /** Table layout */
  | 'TABLE_LAYOUT'
  /** Roadmap layout */
  | 'ROADMAP_LAYOUT';

/** Ordering options for project v2 view connections */
export type ProjectV2ViewOrder = {
  /** The field to order the project v2 views by. */
  field: ProjectV2ViewOrderField;
  /** The ordering direction. */
  direction: OrderDirection;
};

/** Properties by which project v2 view connections can be ordered. */
export type ProjectV2ViewOrderField =
  /** Order project v2 views by position */
  | 'POSITION'
  /** Order project v2 views by creation time */
  | 'CREATED_AT'
  /** Order project v2 views by name */
  | 'NAME';




/** Ordering options for project v2 workflows connections */
export type ProjectV2WorkflowOrder = {
  /** The field to order the project v2 workflows by. */
  field: ProjectV2WorkflowsOrderField;
  /** The ordering direction. */
  direction: OrderDirection;
};

/** Properties by which project workflows can be ordered. */
export type ProjectV2WorkflowsOrderField =
  /** The workflows' name */
  | 'NAME'
  /** The workflows' number */
  | 'NUMBER'
  /** The workflows' date and time of update */
  | 'UPDATED_AT'
  /** The workflows' date and time of creation */
  | 'CREATED_AT';




/** Autogenerated input type of PublishSponsorsTier */
export type PublishSponsorsTierInput = {
  /** The ID of the draft tier to publish. */
  tierId: Scalars['ID'];
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
};













/** Represents available types of methods to use when merging a pull request. */
export type PullRequestMergeMethod =
  /** Add all commits from the head branch to the base branch with a merge commit. */
  | 'MERGE'
  /** Combine all commits from the head branch into a single commit in the base branch. */
  | 'SQUASH'
  /** Add all commits from the head branch onto the base branch individually. */
  | 'REBASE';

/** Ways in which lists of issues can be ordered upon return. */
export type PullRequestOrder = {
  /** The field in which to order pull requests by. */
  field: PullRequestOrderField;
  /** The direction in which to order pull requests by the specified field. */
  direction: OrderDirection;
};

/** Properties by which pull_requests connections can be ordered. */
export type PullRequestOrderField =
  /** Order pull_requests by creation time */
  | 'CREATED_AT'
  /** Order pull_requests by update time */
  | 'UPDATED_AT';


/** Require all commits be made to a non-target branch and submitted via a pull request before they can be merged. */
export type PullRequestParametersInput = {
  /** New, reviewable commits pushed will dismiss previous pull request review approvals. */
  dismissStaleReviewsOnPush: Scalars['Boolean'];
  /** Require an approving review in pull requests that modify files that have a designated code owner. */
  requireCodeOwnerReview: Scalars['Boolean'];
  /** Whether the most recent reviewable push must be approved by someone other than the person who pushed it. */
  requireLastPushApproval: Scalars['Boolean'];
  /** The number of approving reviews that are required before a pull request can be merged. */
  requiredApprovingReviewCount: Scalars['Int'];
  /** All conversations on code must be resolved before a pull request can be merged. */
  requiredReviewThreadResolution: Scalars['Boolean'];
};





/** The possible states of a pull request review comment. */
export type PullRequestReviewCommentState =
  /** A comment that is part of a pending review */
  | 'PENDING'
  /** A comment that is part of a submitted review */
  | 'SUBMITTED';



/** The review status of a pull request. */
export type PullRequestReviewDecision =
  /** Changes have been requested on the pull request. */
  | 'CHANGES_REQUESTED'
  /** The pull request has received an approving review. */
  | 'APPROVED'
  /** A review is required before the pull request can be merged. */
  | 'REVIEW_REQUIRED';


/** The possible events to perform on a pull request review. */
export type PullRequestReviewEvent =
  /** Submit general feedback without explicit approval. */
  | 'COMMENT'
  /** Submit feedback and approve merging these changes. */
  | 'APPROVE'
  /** Submit feedback that must be addressed before merging. */
  | 'REQUEST_CHANGES'
  /** Dismiss review so it now longer effects merging. */
  | 'DISMISS';

/** The possible states of a pull request review. */
export type PullRequestReviewState =
  /** A review that has not yet been submitted. */
  | 'PENDING'
  /** An informational review. */
  | 'COMMENTED'
  /** A review allowing the pull request to merge. */
  | 'APPROVED'
  /** A review blocking the pull request from merging. */
  | 'CHANGES_REQUESTED'
  /** A review that has been dismissed. */
  | 'DISMISSED';




/** The possible subject types of a pull request review comment. */
export type PullRequestReviewThreadSubjectType =
  /** A comment that has been made against the line of a pull request */
  | 'LINE'
  /** A comment that has been made against the file of a pull request */
  | 'FILE';


/** The possible states of a pull request. */
export type PullRequestState =
  /** A pull request that is still open. */
  | 'OPEN'
  /** A pull request that has been closed without being merged. */
  | 'CLOSED'
  /** A pull request that has been closed by being merged. */
  | 'MERGED';









/** The possible item types found in a timeline. */
export type PullRequestTimelineItemsItemType =
  /** Represents a Git commit part of a pull request. */
  | 'PULL_REQUEST_COMMIT'
  /** Represents a commit comment thread part of a pull request. */
  | 'PULL_REQUEST_COMMIT_COMMENT_THREAD'
  /** A review object for a given pull request. */
  | 'PULL_REQUEST_REVIEW'
  /** A threaded list of comments for a given pull request. */
  | 'PULL_REQUEST_REVIEW_THREAD'
  /** Represents the latest point in the pull request timeline for which the viewer has seen the pull request's commits. */
  | 'PULL_REQUEST_REVISION_MARKER'
  /** Represents a 'automatic_base_change_failed' event on a given pull request. */
  | 'AUTOMATIC_BASE_CHANGE_FAILED_EVENT'
  /** Represents a 'automatic_base_change_succeeded' event on a given pull request. */
  | 'AUTOMATIC_BASE_CHANGE_SUCCEEDED_EVENT'
  /** Represents a 'auto_merge_disabled' event on a given pull request. */
  | 'AUTO_MERGE_DISABLED_EVENT'
  /** Represents a 'auto_merge_enabled' event on a given pull request. */
  | 'AUTO_MERGE_ENABLED_EVENT'
  /** Represents a 'auto_rebase_enabled' event on a given pull request. */
  | 'AUTO_REBASE_ENABLED_EVENT'
  /** Represents a 'auto_squash_enabled' event on a given pull request. */
  | 'AUTO_SQUASH_ENABLED_EVENT'
  /** Represents a 'base_ref_changed' event on a given issue or pull request. */
  | 'BASE_REF_CHANGED_EVENT'
  /** Represents a 'base_ref_force_pushed' event on a given pull request. */
  | 'BASE_REF_FORCE_PUSHED_EVENT'
  /** Represents a 'base_ref_deleted' event on a given pull request. */
  | 'BASE_REF_DELETED_EVENT'
  /** Represents a 'deployed' event on a given pull request. */
  | 'DEPLOYED_EVENT'
  /** Represents a 'deployment_environment_changed' event on a given pull request. */
  | 'DEPLOYMENT_ENVIRONMENT_CHANGED_EVENT'
  /** Represents a 'head_ref_deleted' event on a given pull request. */
  | 'HEAD_REF_DELETED_EVENT'
  /** Represents a 'head_ref_force_pushed' event on a given pull request. */
  | 'HEAD_REF_FORCE_PUSHED_EVENT'
  /** Represents a 'head_ref_restored' event on a given pull request. */
  | 'HEAD_REF_RESTORED_EVENT'
  /** Represents a 'merged' event on a given pull request. */
  | 'MERGED_EVENT'
  /** Represents a 'review_dismissed' event on a given issue or pull request. */
  | 'REVIEW_DISMISSED_EVENT'
  /** Represents an 'review_requested' event on a given pull request. */
  | 'REVIEW_REQUESTED_EVENT'
  /** Represents an 'review_request_removed' event on a given pull request. */
  | 'REVIEW_REQUEST_REMOVED_EVENT'
  /** Represents a 'ready_for_review' event on a given pull request. */
  | 'READY_FOR_REVIEW_EVENT'
  /** Represents a 'convert_to_draft' event on a given pull request. */
  | 'CONVERT_TO_DRAFT_EVENT'
  /** Represents an 'added_to_merge_queue' event on a given pull request. */
  | 'ADDED_TO_MERGE_QUEUE_EVENT'
  /** Represents a 'removed_from_merge_queue' event on a given pull request. */
  | 'REMOVED_FROM_MERGE_QUEUE_EVENT'
  /** Represents a comment on an Issue. */
  | 'ISSUE_COMMENT'
  /** Represents a mention made by one issue or pull request to another. */
  | 'CROSS_REFERENCED_EVENT'
  /** Represents a 'added_to_project' event on a given issue or pull request. */
  | 'ADDED_TO_PROJECT_EVENT'
  /** Represents an 'assigned' event on any assignable object. */
  | 'ASSIGNED_EVENT'
  /** Represents a 'closed' event on any `Closable`. */
  | 'CLOSED_EVENT'
  /** Represents a 'comment_deleted' event on a given issue or pull request. */
  | 'COMMENT_DELETED_EVENT'
  /** Represents a 'connected' event on a given issue or pull request. */
  | 'CONNECTED_EVENT'
  /** Represents a 'converted_note_to_issue' event on a given issue or pull request. */
  | 'CONVERTED_NOTE_TO_ISSUE_EVENT'
  /** Represents a 'converted_to_discussion' event on a given issue. */
  | 'CONVERTED_TO_DISCUSSION_EVENT'
  /** Represents a 'demilestoned' event on a given issue or pull request. */
  | 'DEMILESTONED_EVENT'
  /** Represents a 'disconnected' event on a given issue or pull request. */
  | 'DISCONNECTED_EVENT'
  /** Represents a 'labeled' event on a given issue or pull request. */
  | 'LABELED_EVENT'
  /** Represents a 'locked' event on a given issue or pull request. */
  | 'LOCKED_EVENT'
  /** Represents a 'marked_as_duplicate' event on a given issue or pull request. */
  | 'MARKED_AS_DUPLICATE_EVENT'
  /** Represents a 'mentioned' event on a given issue or pull request. */
  | 'MENTIONED_EVENT'
  /** Represents a 'milestoned' event on a given issue or pull request. */
  | 'MILESTONED_EVENT'
  /** Represents a 'moved_columns_in_project' event on a given issue or pull request. */
  | 'MOVED_COLUMNS_IN_PROJECT_EVENT'
  /** Represents a 'pinned' event on a given issue or pull request. */
  | 'PINNED_EVENT'
  /** Represents a 'referenced' event on a given `ReferencedSubject`. */
  | 'REFERENCED_EVENT'
  /** Represents a 'removed_from_project' event on a given issue or pull request. */
  | 'REMOVED_FROM_PROJECT_EVENT'
  /** Represents a 'renamed' event on a given issue or pull request */
  | 'RENAMED_TITLE_EVENT'
  /** Represents a 'reopened' event on any `Closable`. */
  | 'REOPENED_EVENT'
  /** Represents a 'subscribed' event on a given `Subscribable`. */
  | 'SUBSCRIBED_EVENT'
  /** Represents a 'transferred' event on a given issue or pull request. */
  | 'TRANSFERRED_EVENT'
  /** Represents an 'unassigned' event on any assignable object. */
  | 'UNASSIGNED_EVENT'
  /** Represents an 'unlabeled' event on a given issue or pull request. */
  | 'UNLABELED_EVENT'
  /** Represents an 'unlocked' event on a given issue or pull request. */
  | 'UNLOCKED_EVENT'
  /** Represents a 'user_blocked' event on a given user. */
  | 'USER_BLOCKED_EVENT'
  /** Represents an 'unmarked_as_duplicate' event on a given issue or pull request. */
  | 'UNMARKED_AS_DUPLICATE_EVENT'
  /** Represents an 'unpinned' event on a given issue or pull request. */
  | 'UNPINNED_EVENT'
  /** Represents an 'unsubscribed' event on a given `Subscribable`. */
  | 'UNSUBSCRIBED_EVENT';

/** The possible target states when updating a pull request. */
export type PullRequestUpdateState =
  /** A pull request that is still open. */
  | 'OPEN'
  /** A pull request that has been closed without being merged. */
  | 'CLOSED';













/** Emojis that can be attached to Issues, Pull Requests and Comments. */
export type ReactionContent =
  /** Represents the `:+1:` emoji. */
  | 'THUMBS_UP'
  /** Represents the `:-1:` emoji. */
  | 'THUMBS_DOWN'
  /** Represents the `:laugh:` emoji. */
  | 'LAUGH'
  /** Represents the `:hooray:` emoji. */
  | 'HOORAY'
  /** Represents the `:confused:` emoji. */
  | 'CONFUSED'
  /** Represents the `:heart:` emoji. */
  | 'HEART'
  /** Represents the `:rocket:` emoji. */
  | 'ROCKET'
  /** Represents the `:eyes:` emoji. */
  | 'EYES';



/** Ways in which lists of reactions can be ordered upon return. */
export type ReactionOrder = {
  /** The field in which to order reactions by. */
  field: ReactionOrderField;
  /** The direction in which to order reactions by the specified field. */
  direction: OrderDirection;
};

/** A list of fields that reactions can be ordered by. */
export type ReactionOrderField =
  /** Allows ordering a list of reactions by when they were created. */
  | 'CREATED_AT';









/** Parameters to be used for the ref_name condition */
export type RefNameConditionTargetInput = {
  /** Array of ref names or patterns to exclude. The condition will not pass if any of these patterns match. */
  exclude: Array<Scalars['String']>;
  /** Array of ref names or patterns to include. One of these patterns must match for the condition to pass. Also accepts `~DEFAULT_BRANCH` to include the default branch or `~ALL` to include all branches. */
  include: Array<Scalars['String']>;
};

/** Ways in which lists of git refs can be ordered upon return. */
export type RefOrder = {
  /** The field in which to order refs by. */
  field: RefOrderField;
  /** The direction in which to order refs by the specified field. */
  direction: OrderDirection;
};

/** Properties by which ref connections can be ordered. */
export type RefOrderField =
  /** Order refs by underlying commit date if the ref prefix is refs/tags/ */
  | 'TAG_COMMIT_DATE'
  /** Order refs by their alphanumeric name */
  | 'ALPHABETICAL';




/** Autogenerated input type of RegenerateEnterpriseIdentityProviderRecoveryCodes */
export type RegenerateEnterpriseIdentityProviderRecoveryCodesInput = {
  /** The ID of the enterprise on which to set an identity provider. */
  enterpriseId: Scalars['ID'];
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
};


/** Autogenerated input type of RegenerateVerifiableDomainToken */
export type RegenerateVerifiableDomainTokenInput = {
  /** The ID of the verifiable domain to regenerate the verification token of. */
  id: Scalars['ID'];
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
};


/** Autogenerated input type of RejectDeployments */
export type RejectDeploymentsInput = {
  /** The node ID of the workflow run containing the pending deployments. */
  workflowRunId: Scalars['ID'];
  /** The ids of environments to reject deployments */
  environmentIds: Array<Scalars['ID']>;
  /** Optional comment for rejecting deployments */
  comment?: Maybe<Scalars['String']>;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
};








/** Ways in which lists of releases can be ordered upon return. */
export type ReleaseOrder = {
  /** The field in which to order releases by. */
  field: ReleaseOrderField;
  /** The direction in which to order releases by the specified field. */
  direction: OrderDirection;
};

/** Properties by which release connections can be ordered. */
export type ReleaseOrderField =
  /** Order releases by creation time */
  | 'CREATED_AT'
  /** Order releases alphabetically by name */
  | 'NAME';

/** Autogenerated input type of RemoveAssigneesFromAssignable */
export type RemoveAssigneesFromAssignableInput = {
  /** The id of the assignable object to remove assignees from. */
  assignableId: Scalars['ID'];
  /** The id of users to remove as assignees. */
  assigneeIds: Array<Scalars['ID']>;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
};


/** Autogenerated input type of RemoveEnterpriseAdmin */
export type RemoveEnterpriseAdminInput = {
  /** The Enterprise ID from which to remove the administrator. */
  enterpriseId: Scalars['ID'];
  /** The login of the user to remove as an administrator. */
  login: Scalars['String'];
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
};


/** Autogenerated input type of RemoveEnterpriseIdentityProvider */
export type RemoveEnterpriseIdentityProviderInput = {
  /** The ID of the enterprise from which to remove the identity provider. */
  enterpriseId: Scalars['ID'];
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
};


/** Autogenerated input type of RemoveEnterpriseMember */
export type RemoveEnterpriseMemberInput = {
  /** The ID of the enterprise from which the user should be removed. */
  enterpriseId: Scalars['ID'];
  /** The ID of the user to remove from the enterprise. */
  userId: Scalars['ID'];
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
};


/** Autogenerated input type of RemoveEnterpriseOrganization */
export type RemoveEnterpriseOrganizationInput = {
  /** The ID of the enterprise from which the organization should be removed. */
  enterpriseId: Scalars['ID'];
  /** The ID of the organization to remove from the enterprise. */
  organizationId: Scalars['ID'];
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
};


/** Autogenerated input type of RemoveEnterpriseSupportEntitlement */
export type RemoveEnterpriseSupportEntitlementInput = {
  /** The ID of the Enterprise which the admin belongs to. */
  enterpriseId: Scalars['ID'];
  /** The login of a member who will lose the support entitlement. */
  login: Scalars['String'];
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
};


/** Autogenerated input type of RemoveLabelsFromLabelable */
export type RemoveLabelsFromLabelableInput = {
  /** The id of the Labelable to remove labels from. */
  labelableId: Scalars['ID'];
  /** The ids of labels to remove. */
  labelIds: Array<Scalars['ID']>;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
};


/** Autogenerated input type of RemoveOutsideCollaborator */
export type RemoveOutsideCollaboratorInput = {
  /** The ID of the outside collaborator to remove. */
  userId: Scalars['ID'];
  /** The ID of the organization to remove the outside collaborator from. */
  organizationId: Scalars['ID'];
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
};


/** Autogenerated input type of RemoveReaction */
export type RemoveReactionInput = {
  /** The Node ID of the subject to modify. */
  subjectId: Scalars['ID'];
  /** The name of the emoji reaction to remove. */
  content: ReactionContent;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
};


/** Autogenerated input type of RemoveStar */
export type RemoveStarInput = {
  /** The Starrable ID to unstar. */
  starrableId: Scalars['ID'];
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
};


/** Autogenerated input type of RemoveUpvote */
export type RemoveUpvoteInput = {
  /** The Node ID of the discussion or comment to remove upvote. */
  subjectId: Scalars['ID'];
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
};






/** Autogenerated input type of ReopenDiscussion */
export type ReopenDiscussionInput = {
  /** ID of the discussion to be reopened. */
  discussionId: Scalars['ID'];
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
};


/** Autogenerated input type of ReopenIssue */
export type ReopenIssueInput = {
  /** ID of the issue to be opened. */
  issueId: Scalars['ID'];
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
};


/** Autogenerated input type of ReopenPullRequest */
export type ReopenPullRequestInput = {
  /** ID of the pull request to be reopened. */
  pullRequestId: Scalars['ID'];
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
};




/** The privacy of a repository */
export type RepoAccessAuditEntryVisibility =
  /** The repository is visible only to users in the same business. */
  | 'INTERNAL'
  /** The repository is visible only to those with explicit access. */
  | 'PRIVATE'
  /** The repository is visible to everyone. */
  | 'PUBLIC';


/** The privacy of a repository */
export type RepoAddMemberAuditEntryVisibility =
  /** The repository is visible only to users in the same business. */
  | 'INTERNAL'
  /** The repository is visible only to those with explicit access. */
  | 'PRIVATE'
  /** The repository is visible to everyone. */
  | 'PUBLIC';



/** The privacy of a repository */
export type RepoArchivedAuditEntryVisibility =
  /** The repository is visible only to users in the same business. */
  | 'INTERNAL'
  /** The repository is visible only to those with explicit access. */
  | 'PRIVATE'
  /** The repository is visible to everyone. */
  | 'PUBLIC';


/** The merge options available for pull requests to this repository. */
export type RepoChangeMergeSettingAuditEntryMergeType =
  /** The pull request is added to the base branch in a merge commit. */
  | 'MERGE'
  /** Commits from the pull request are added onto the base branch individually without a merge commit. */
  | 'REBASE'
  /** The pull request's commits are squashed into a single commit before they are merged to the base branch. */
  | 'SQUASH';












/** The privacy of a repository */
export type RepoCreateAuditEntryVisibility =
  /** The repository is visible only to users in the same business. */
  | 'INTERNAL'
  /** The repository is visible only to those with explicit access. */
  | 'PRIVATE'
  /** The repository is visible to everyone. */
  | 'PUBLIC';


/** The privacy of a repository */
export type RepoDestroyAuditEntryVisibility =
  /** The repository is visible only to users in the same business. */
  | 'INTERNAL'
  /** The repository is visible only to those with explicit access. */
  | 'PRIVATE'
  /** The repository is visible to everyone. */
  | 'PUBLIC';


/** The privacy of a repository */
export type RepoRemoveMemberAuditEntryVisibility =
  /** The repository is visible only to users in the same business. */
  | 'INTERNAL'
  /** The repository is visible only to those with explicit access. */
  | 'PRIVATE'
  /** The repository is visible to everyone. */
  | 'PUBLIC';


/** The reasons a piece of content can be reported or minimized. */
export type ReportedContentClassifiers =
  /** A spammy piece of content */
  | 'SPAM'
  /** An abusive or harassing piece of content */
  | 'ABUSE'
  /** An irrelevant piece of content */
  | 'OFF_TOPIC'
  /** An outdated piece of content */
  | 'OUTDATED'
  /** A duplicated piece of content */
  | 'DUPLICATE'
  /** The content has been resolved */
  | 'RESOLVED';


/** The affiliation of a user to a repository */
export type RepositoryAffiliation =
  /** Repositories that are owned by the authenticated user. */
  | 'OWNER'
  /** Repositories that the user has been added to as a collaborator. */
  | 'COLLABORATOR'
  /** Repositories that the user has access to through being a member of an organization. This includes every repository on every team that the user is on. */
  | 'ORGANIZATION_MEMBER';








/** The reason a repository is listed as 'contributed'. */
export type RepositoryContributionType =
  /** Created a commit */
  | 'COMMIT'
  /** Created an issue */
  | 'ISSUE'
  /** Created a pull request */
  | 'PULL_REQUEST'
  /** Created the repository */
  | 'REPOSITORY'
  /** Reviewed a pull request */
  | 'PULL_REQUEST_REVIEW';






/** A repository interaction limit. */
export type RepositoryInteractionLimit =
  /** Users that have recently created their account will be unable to interact with the repository. */
  | 'EXISTING_USERS'
  /** Users that have not previously committed to a repository’s default branch will be unable to interact with the repository. */
  | 'CONTRIBUTORS_ONLY'
  /** Users that are not collaborators will not be able to interact with the repository. */
  | 'COLLABORATORS_ONLY'
  /** No interaction limits are enabled. */
  | 'NO_LIMIT';

/** The length for a repository interaction limit to be enabled for. */
export type RepositoryInteractionLimitExpiry =
  /** The interaction limit will expire after 1 day. */
  | 'ONE_DAY'
  /** The interaction limit will expire after 3 days. */
  | 'THREE_DAYS'
  /** The interaction limit will expire after 1 week. */
  | 'ONE_WEEK'
  /** The interaction limit will expire after 1 month. */
  | 'ONE_MONTH'
  /** The interaction limit will expire after 6 months. */
  | 'SIX_MONTHS';

/** Indicates where an interaction limit is configured. */
export type RepositoryInteractionLimitOrigin =
  /** A limit that is configured at the repository level. */
  | 'REPOSITORY'
  /** A limit that is configured at the organization level. */
  | 'ORGANIZATION'
  /** A limit that is configured at the user-wide level. */
  | 'USER';




/** Ordering options for repository invitation connections. */
export type RepositoryInvitationOrder = {
  /** The field to order repository invitations by. */
  field: RepositoryInvitationOrderField;
  /** The ordering direction. */
  direction: OrderDirection;
};

/** Properties by which repository invitation connections can be ordered. */
export type RepositoryInvitationOrderField =
  /** Order repository invitations by creation time */
  | 'CREATED_AT';

/** The possible reasons a given repository could be in a locked state. */
export type RepositoryLockReason =
  /** The repository is locked due to a move. */
  | 'MOVING'
  /** The repository is locked due to a billing related reason. */
  | 'BILLING'
  /** The repository is locked due to a rename. */
  | 'RENAME'
  /** The repository is locked due to a migration. */
  | 'MIGRATING'
  /** The repository is locked due to a trade controls related reason. */
  | 'TRADE_RESTRICTION';




/** Ordering options for repository migrations. */
export type RepositoryMigrationOrder = {
  /** The field to order repository migrations by. */
  field: RepositoryMigrationOrderField;
  /** The ordering direction. */
  direction: RepositoryMigrationOrderDirection;
};

/** Possible directions in which to order a list of repository migrations when provided an `orderBy` argument. */
export type RepositoryMigrationOrderDirection =
  /** Specifies an ascending order for a given `orderBy` argument. */
  | 'ASC'
  /** Specifies a descending order for a given `orderBy` argument. */
  | 'DESC';

/** Properties by which repository migrations can be ordered. */
export type RepositoryMigrationOrderField =
  /** Order mannequins why when they were created. */
  | 'CREATED_AT';


/** Parameters to be used for the repository_name condition */
export type RepositoryNameConditionTargetInput = {
  /** Array of repository names or patterns to exclude. The condition will not pass if any of these patterns match. */
  exclude: Array<Scalars['String']>;
  /** Array of repository names or patterns to include. One of these patterns must match for the condition to pass. Also accepts `~ALL` to include all repositories. */
  include: Array<Scalars['String']>;
  /** Target changes that match these patterns will be prevented except by those with bypass permissions. */
  protected?: Maybe<Scalars['Boolean']>;
};


/** Ordering options for repository connections */
export type RepositoryOrder = {
  /** The field to order repositories by. */
  field: RepositoryOrderField;
  /** The ordering direction. */
  direction: OrderDirection;
};

/** Properties by which repository connections can be ordered. */
export type RepositoryOrderField =
  /** Order repositories by creation time */
  | 'CREATED_AT'
  /** Order repositories by update time */
  | 'UPDATED_AT'
  /** Order repositories by push time */
  | 'PUSHED_AT'
  /** Order repositories by name */
  | 'NAME'
  /** Order repositories by number of stargazers */
  | 'STARGAZERS';


/** The access level to a repository */
export type RepositoryPermission =
  /** Can read, clone, and push to this repository. Can also manage issues, pull requests, and repository settings, including adding collaborators */
  | 'ADMIN'
  /** Can read, clone, and push to this repository. They can also manage issues, pull requests, and some repository settings */
  | 'MAINTAIN'
  /** Can read, clone, and push to this repository. Can also manage issues and pull requests */
  | 'WRITE'
  /** Can read and clone this repository. Can also manage issues and pull requests */
  | 'TRIAGE'
  /** Can read and clone this repository. Can also open and comment on issues and pull requests */
  | 'READ';

/** The privacy of a repository */
export type RepositoryPrivacy =
  /** Public */
  | 'PUBLIC'
  /** Private */
  | 'PRIVATE';



/** Specifies the conditions required for a ruleset to evaluate */
export type RepositoryRuleConditionsInput = {
  /** Configuration for the ref_name condition */
  refName?: Maybe<RefNameConditionTargetInput>;
  /** Configuration for the repository_name condition */
  repositoryName?: Maybe<RepositoryNameConditionTargetInput>;
};



/** Specifies the attributes for a new or updated rule. */
export type RepositoryRuleInput = {
  /** Optional ID of this rule when updating */
  id?: Maybe<Scalars['ID']>;
  /** The type of rule to create. */
  type: RepositoryRuleType;
  /** The parameters for the rule. */
  parameters?: Maybe<RuleParametersInput>;
};

/** The rule types supported in rulesets */
export type RepositoryRuleType =
  /** Only allow users with bypass permission to create matching refs. */
  | 'CREATION'
  /** Only allow users with bypass permission to update matching refs. */
  | 'UPDATE'
  /** Only allow users with bypass permissions to delete matching refs. */
  | 'DELETION'
  /** Prevent merge commits from being pushed to matching branches. */
  | 'REQUIRED_LINEAR_HISTORY'
  /** Choose which environments must be successfully deployed to before branches can be merged into a branch that matches this rule. */
  | 'REQUIRED_DEPLOYMENTS'
  /** Commits pushed to matching branches must have verified signatures. */
  | 'REQUIRED_SIGNATURES'
  /** Require all commits be made to a non-target branch and submitted via a pull request before they can be merged. */
  | 'PULL_REQUEST'
  /** Choose which status checks must pass before branches can be merged into a branch that matches this rule. When enabled, commits must first be pushed to another branch, then merged or pushed directly to a branch that matches this rule after status checks have passed. */
  | 'REQUIRED_STATUS_CHECKS'
  /** Prevent users with push access from force pushing to branches. */
  | 'NON_FAST_FORWARD'
  /** Commit message pattern */
  | 'COMMIT_MESSAGE_PATTERN'
  /** Commit author email pattern */
  | 'COMMIT_AUTHOR_EMAIL_PATTERN'
  /** Committer email pattern */
  | 'COMMITTER_EMAIL_PATTERN'
  /** Branch name pattern */
  | 'BRANCH_NAME_PATTERN'
  /** Tag name pattern */
  | 'TAG_NAME_PATTERN';







/** The targets supported for rulesets */
export type RepositoryRulesetTarget =
  /** Branch */
  | 'BRANCH'
  /** Tag */
  | 'TAG';




/** The repository's visibility level. */
export type RepositoryVisibility =
  /** The repository is visible only to those with explicit access. */
  | 'PRIVATE'
  /** The repository is visible to everyone. */
  | 'PUBLIC'
  /** The repository is visible only to users in the same business. */
  | 'INTERNAL';





/** The possible scopes of an alert's dependency. */
export type RepositoryVulnerabilityAlertDependencyScope =
  /** A dependency that is leveraged during application runtime */
  | 'RUNTIME'
  /** A dependency that is only used in development */
  | 'DEVELOPMENT';


/** The possible states of an alert */
export type RepositoryVulnerabilityAlertState =
  /** An alert that is still open. */
  | 'OPEN'
  /** An alert that has been resolved by a code change. */
  | 'FIXED'
  /** An alert that has been manually closed by a user. */
  | 'DISMISSED'
  /** An alert that has been automatically closed by Dependabot. */
  | 'AUTO_DISMISSED';

/** Autogenerated input type of RequestReviews */
export type RequestReviewsInput = {
  /** The Node ID of the pull request to modify. */
  pullRequestId: Scalars['ID'];
  /** The Node IDs of the user to request. */
  userIds?: Maybe<Array<Scalars['ID']>>;
  /** The Node IDs of the team to request. */
  teamIds?: Maybe<Array<Scalars['ID']>>;
  /** Add users to the set rather than replace. */
  union?: Maybe<Scalars['Boolean']>;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
};


/** The possible states that can be requested when creating a check run. */
export type RequestableCheckStatusState =
  /** The check suite or run has been queued. */
  | 'QUEUED'
  /** The check suite or run is in progress. */
  | 'IN_PROGRESS'
  /** The check suite or run has been completed. */
  | 'COMPLETED'
  /** The check suite or run is in waiting state. */
  | 'WAITING'
  /** The check suite or run is in pending state. */
  | 'PENDING';






/** Choose which environments must be successfully deployed to before branches can be merged into a branch that matches this rule. */
export type RequiredDeploymentsParametersInput = {
  /** The environments that must be successfully deployed to before branches can be merged. */
  requiredDeploymentEnvironments: Array<Scalars['String']>;
};


/** Specifies the attributes for a new or updated required status check. */
export type RequiredStatusCheckInput = {
  /** Status check context that must pass for commits to be accepted to the matching branch. */
  context: Scalars['String'];
  /** The ID of the App that must set the status in order for it to be accepted. Omit this value to use whichever app has recently been setting this status, or use "any" to allow any app to set the status. */
  appId?: Maybe<Scalars['ID']>;
};


/** Choose which status checks must pass before branches can be merged into a branch that matches this rule. When enabled, commits must first be pushed to another branch, then merged or pushed directly to a branch that matches this rule after status checks have passed. */
export type RequiredStatusChecksParametersInput = {
  /** Status checks that are required. */
  requiredStatusChecks: Array<StatusCheckConfigurationInput>;
  /** Whether pull requests targeting a matching branch must be tested with the latest code. This setting will not take effect unless at least one status check is enabled. */
  strictRequiredStatusChecksPolicy: Scalars['Boolean'];
};

/** Autogenerated input type of RerequestCheckSuite */
export type RerequestCheckSuiteInput = {
  /** The Node ID of the repository. */
  repositoryId: Scalars['ID'];
  /** The Node ID of the check suite. */
  checkSuiteId: Scalars['ID'];
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
};


/** Autogenerated input type of ResolveReviewThread */
export type ResolveReviewThreadInput = {
  /** The ID of the thread to resolve */
  threadId: Scalars['ID'];
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
};



/** Autogenerated input type of RetireSponsorsTier */
export type RetireSponsorsTierInput = {
  /** The ID of the published tier to retire. */
  tierId: Scalars['ID'];
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
};


/** Autogenerated input type of RevertPullRequest */
export type RevertPullRequestInput = {
  /** The ID of the pull request to revert. */
  pullRequestId: Scalars['ID'];
  /** The title of the revert pull request. */
  title?: Maybe<Scalars['String']>;
  /** The description of the revert pull request. */
  body?: Maybe<Scalars['String']>;
  /** Indicates whether the revert pull request should be a draft. */
  draft?: Maybe<Scalars['Boolean']>;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
};













/** Autogenerated input type of RevokeEnterpriseOrganizationsMigratorRole */
export type RevokeEnterpriseOrganizationsMigratorRoleInput = {
  /** The ID of the enterprise to which all organizations managed by it will be granted the migrator role. */
  enterpriseId: Scalars['ID'];
  /** The login of the user to revoke the migrator role */
  login: Scalars['String'];
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
};


/** Autogenerated input type of RevokeMigratorRole */
export type RevokeMigratorRoleInput = {
  /** The ID of the organization that the user/team belongs to. */
  organizationId: Scalars['ID'];
  /** The user login or Team slug to revoke the migrator role from. */
  actor: Scalars['String'];
  /** Specifies the type of the actor, can be either USER or TEAM. */
  actorType: ActorType;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
};


/** Possible roles a user may have in relation to an organization. */
export type RoleInOrganization =
  /** A user with full administrative access to the organization. */
  | 'OWNER'
  /** A user who is a direct member of the organization. */
  | 'DIRECT_MEMBER'
  /** A user who is unaffiliated with the organization. */
  | 'UNAFFILIATED';

/** The bypass mode for a rule or ruleset. */
export type RuleBypassMode =
  /** Bypassing is disabled */
  | 'NONE'
  /** Those with bypass permission at the repository level can bypass */
  | 'REPOSITORY'
  /** Those with bypass permission at the organization level can bypass */
  | 'ORGANIZATION';

/** The level of enforcement for a rule or ruleset. */
export type RuleEnforcement =
  /** Do not evaluate or enforce rules */
  | 'DISABLED'
  /** Rules will be enforced */
  | 'ACTIVE'
  /** Allow admins to test rules before enforcing them. Admins can view insights on the Rule Insights page (`evaluate` is only available with GitHub Enterprise). */
  | 'EVALUATE';


/** Specifies the parameters for a `RepositoryRule` object. Only one of the fields should be specified. */
export type RuleParametersInput = {
  /** Parameters used for the `update` rule type */
  update?: Maybe<UpdateParametersInput>;
  /** Parameters used for the `required_deployments` rule type */
  requiredDeployments?: Maybe<RequiredDeploymentsParametersInput>;
  /** Parameters used for the `pull_request` rule type */
  pullRequest?: Maybe<PullRequestParametersInput>;
  /** Parameters used for the `required_status_checks` rule type */
  requiredStatusChecks?: Maybe<RequiredStatusChecksParametersInput>;
  /** Parameters used for the `commit_message_pattern` rule type */
  commitMessagePattern?: Maybe<CommitMessagePatternParametersInput>;
  /** Parameters used for the `commit_author_email_pattern` rule type */
  commitAuthorEmailPattern?: Maybe<CommitAuthorEmailPatternParametersInput>;
  /** Parameters used for the `committer_email_pattern` rule type */
  committerEmailPattern?: Maybe<CommitterEmailPatternParametersInput>;
  /** Parameters used for the `branch_name_pattern` rule type */
  branchNamePattern?: Maybe<BranchNamePatternParametersInput>;
  /** Parameters used for the `tag_name_pattern` rule type */
  tagNamePattern?: Maybe<TagNamePatternParametersInput>;
};


/** The possible digest algorithms used to sign SAML requests for an identity provider. */
export type SamlDigestAlgorithm =
  /** SHA1 */
  | 'SHA1'
  /** SHA256 */
  | 'SHA256'
  /** SHA384 */
  | 'SHA384'
  /** SHA512 */
  | 'SHA512';

/** The possible signature algorithms used to sign SAML requests for a Identity Provider. */
export type SamlSignatureAlgorithm =
  /** RSA-SHA1 */
  | 'RSA_SHA1'
  /** RSA-SHA256 */
  | 'RSA_SHA256'
  /** RSA-SHA384 */
  | 'RSA_SHA384'
  /** RSA-SHA512 */
  | 'RSA_SHA512';




/** Ordering options for saved reply connections. */
export type SavedReplyOrder = {
  /** The field to order saved replies by. */
  field: SavedReplyOrderField;
  /** The ordering direction. */
  direction: OrderDirection;
};

/** Properties by which saved reply connections can be ordered. */
export type SavedReplyOrderField =
  /** Order saved reply by when they were updated. */
  | 'UPDATED_AT';




/** Represents the individual results of a search. */
export type SearchType =
  /** Returns results matching issues in repositories. */
  | 'ISSUE'
  /** Returns results matching repositories. */
  | 'REPOSITORY'
  /** Returns results matching users and organizations on GitHub. */
  | 'USER'
  /** Returns matching discussions in repositories. */
  | 'DISCUSSION';


/** Classification of the advisory. */
export type SecurityAdvisoryClassification =
  /** Classification of general advisories. */
  | 'GENERAL'
  /** Classification of malware advisories. */
  | 'MALWARE';


/** The possible ecosystems of a security vulnerability's package. */
export type SecurityAdvisoryEcosystem =
  /** PHP packages hosted at packagist.org */
  | 'COMPOSER'
  /** Erlang/Elixir packages hosted at hex.pm */
  | 'ERLANG'
  /** GitHub Actions */
  | 'ACTIONS'
  /** Go modules */
  | 'GO'
  /** Java artifacts hosted at the Maven central repository */
  | 'MAVEN'
  /** JavaScript packages hosted at npmjs.com */
  | 'NPM'
  /** .NET packages hosted at the NuGet Gallery */
  | 'NUGET'
  /** Python packages hosted at PyPI.org */
  | 'PIP'
  /** Dart packages hosted at pub.dev */
  | 'PUB'
  /** Ruby gems hosted at RubyGems.org */
  | 'RUBYGEMS'
  /** Rust crates */
  | 'RUST';



/** An advisory identifier to filter results on. */
export type SecurityAdvisoryIdentifierFilter = {
  /** The identifier type. */
  type: SecurityAdvisoryIdentifierType;
  /** The identifier string. Supports exact or partial matching. */
  value: Scalars['String'];
};

/** Identifier formats available for advisories. */
export type SecurityAdvisoryIdentifierType =
  /** Common Vulnerabilities and Exposures Identifier. */
  | 'CVE'
  /** GitHub Security Advisory ID. */
  | 'GHSA';

/** Ordering options for security advisory connections */
export type SecurityAdvisoryOrder = {
  /** The field to order security advisories by. */
  field: SecurityAdvisoryOrderField;
  /** The ordering direction. */
  direction: OrderDirection;
};

/** Properties by which security advisory connections can be ordered. */
export type SecurityAdvisoryOrderField =
  /** Order advisories by publication time */
  | 'PUBLISHED_AT'
  /** Order advisories by update time */
  | 'UPDATED_AT';




/** Severity of the vulnerability. */
export type SecurityAdvisorySeverity =
  /** Low. */
  | 'LOW'
  /** Moderate. */
  | 'MODERATE'
  /** High. */
  | 'HIGH'
  /** Critical. */
  | 'CRITICAL';




/** Ordering options for security vulnerability connections */
export type SecurityVulnerabilityOrder = {
  /** The field to order security vulnerabilities by. */
  field: SecurityVulnerabilityOrderField;
  /** The ordering direction. */
  direction: OrderDirection;
};

/** Properties by which security vulnerability connections can be ordered. */
export type SecurityVulnerabilityOrderField =
  /** Order vulnerability by update time */
  | 'UPDATED_AT';

/** Autogenerated input type of SetEnterpriseIdentityProvider */
export type SetEnterpriseIdentityProviderInput = {
  /** The ID of the enterprise on which to set an identity provider. */
  enterpriseId: Scalars['ID'];
  /** The URL endpoint for the identity provider's SAML SSO. */
  ssoUrl: Scalars['URI'];
  /** The Issuer Entity ID for the SAML identity provider */
  issuer?: Maybe<Scalars['String']>;
  /** The x509 certificate used by the identity provider to sign assertions and responses. */
  idpCertificate: Scalars['String'];
  /** The signature algorithm used to sign SAML requests for the identity provider. */
  signatureMethod: SamlSignatureAlgorithm;
  /** The digest algorithm used to sign SAML requests for the identity provider. */
  digestMethod: SamlDigestAlgorithm;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
};


/** Autogenerated input type of SetOrganizationInteractionLimit */
export type SetOrganizationInteractionLimitInput = {
  /** The ID of the organization to set a limit for. */
  organizationId: Scalars['ID'];
  /** The limit to set. */
  limit: RepositoryInteractionLimit;
  /** When this limit should expire. */
  expiry?: Maybe<RepositoryInteractionLimitExpiry>;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
};


/** Autogenerated input type of SetRepositoryInteractionLimit */
export type SetRepositoryInteractionLimitInput = {
  /** The ID of the repository to set a limit for. */
  repositoryId: Scalars['ID'];
  /** The limit to set. */
  limit: RepositoryInteractionLimit;
  /** When this limit should expire. */
  expiry?: Maybe<RepositoryInteractionLimitExpiry>;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
};


/** Autogenerated input type of SetUserInteractionLimit */
export type SetUserInteractionLimitInput = {
  /** The ID of the user to set a limit for. */
  userId: Scalars['ID'];
  /** The limit to set. */
  limit: RepositoryInteractionLimit;
  /** When this limit should expire. */
  expiry?: Maybe<RepositoryInteractionLimitExpiry>;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
};






/** Software or company that hosts social media accounts. */
export type SocialAccountProvider =
  /** Catch-all for social media providers that do not yet have specific handling. */
  | 'GENERIC'
  /** Social media and networking website. */
  | 'FACEBOOK'
  /** Fork of Mastodon with a greater focus on local posting. */
  | 'HOMETOWN'
  /** Social media website with a focus on photo and video sharing. */
  | 'INSTAGRAM'
  /** Professional networking website. */
  | 'LINKEDIN'
  /** Open-source federated microblogging service. */
  | 'MASTODON'
  /** Social news aggregation and discussion website. */
  | 'REDDIT'
  /** Live-streaming service. */
  | 'TWITCH'
  /** Microblogging website. */
  | 'TWITTER'
  /** Online video platform. */
  | 'YOUTUBE';




/** Ordering options for connections to get sponsor entities for GitHub Sponsors. */
export type SponsorOrder = {
  /** The field to order sponsor entities by. */
  field: SponsorOrderField;
  /** The ordering direction. */
  direction: OrderDirection;
};

/** Properties by which sponsor connections can be ordered. */
export type SponsorOrderField =
  /** Order sponsorable entities by login (username). */
  | 'LOGIN'
  /** Order sponsors by their relevance to the viewer. */
  | 'RELEVANCE';





/** Ordering options for connections to get sponsorable entities for GitHub Sponsors. */
export type SponsorableOrder = {
  /** The field to order sponsorable entities by. */
  field: SponsorableOrderField;
  /** The ordering direction. */
  direction: OrderDirection;
};

/** Properties by which sponsorable connections can be ordered. */
export type SponsorableOrderField =
  /** Order sponsorable entities by login (username). */
  | 'LOGIN';


/** The possible actions that GitHub Sponsors activities can represent. */
export type SponsorsActivityAction =
  /** The activity was starting a sponsorship. */
  | 'NEW_SPONSORSHIP'
  /** The activity was cancelling a sponsorship. */
  | 'CANCELLED_SPONSORSHIP'
  /** The activity was changing the sponsorship tier, either directly by the sponsor or by a scheduled/pending change. */
  | 'TIER_CHANGE'
  /** The activity was funds being refunded to the sponsor or GitHub. */
  | 'REFUND'
  /** The activity was scheduling a downgrade or cancellation. */
  | 'PENDING_CHANGE'
  /** The activity was disabling matching for a previously matched sponsorship. */
  | 'SPONSOR_MATCH_DISABLED';



/** Ordering options for GitHub Sponsors activity connections. */
export type SponsorsActivityOrder = {
  /** The field to order activity by. */
  field: SponsorsActivityOrderField;
  /** The ordering direction. */
  direction: OrderDirection;
};

/** Properties by which GitHub Sponsors activity connections can be ordered. */
export type SponsorsActivityOrderField =
  /** Order activities by when they happened. */
  | 'TIMESTAMP';

/** The possible time periods for which Sponsors activities can be requested. */
export type SponsorsActivityPeriod =
  /** The previous calendar day. */
  | 'DAY'
  /** The previous seven days. */
  | 'WEEK'
  /** The previous thirty days. */
  | 'MONTH'
  /** Don't restrict the activity to any date range, include all activity. */
  | 'ALL';

/** Represents countries or regions for billing and residence for a GitHub Sponsors profile. */
export type SponsorsCountryOrRegionCode =
  /** Afghanistan */
  | 'AF'
  /** Åland */
  | 'AX'
  /** Albania */
  | 'AL'
  /** Algeria */
  | 'DZ'
  /** American Samoa */
  | 'AS'
  /** Andorra */
  | 'AD'
  /** Angola */
  | 'AO'
  /** Anguilla */
  | 'AI'
  /** Antarctica */
  | 'AQ'
  /** Antigua and Barbuda */
  | 'AG'
  /** Argentina */
  | 'AR'
  /** Armenia */
  | 'AM'
  /** Aruba */
  | 'AW'
  /** Australia */
  | 'AU'
  /** Austria */
  | 'AT'
  /** Azerbaijan */
  | 'AZ'
  /** Bahamas */
  | 'BS'
  /** Bahrain */
  | 'BH'
  /** Bangladesh */
  | 'BD'
  /** Barbados */
  | 'BB'
  /** Belarus */
  | 'BY'
  /** Belgium */
  | 'BE'
  /** Belize */
  | 'BZ'
  /** Benin */
  | 'BJ'
  /** Bermuda */
  | 'BM'
  /** Bhutan */
  | 'BT'
  /** Bolivia */
  | 'BO'
  /** Bonaire, Sint Eustatius and Saba */
  | 'BQ'
  /** Bosnia and Herzegovina */
  | 'BA'
  /** Botswana */
  | 'BW'
  /** Bouvet Island */
  | 'BV'
  /** Brazil */
  | 'BR'
  /** British Indian Ocean Territory */
  | 'IO'
  /** Brunei Darussalam */
  | 'BN'
  /** Bulgaria */
  | 'BG'
  /** Burkina Faso */
  | 'BF'
  /** Burundi */
  | 'BI'
  /** Cambodia */
  | 'KH'
  /** Cameroon */
  | 'CM'
  /** Canada */
  | 'CA'
  /** Cape Verde */
  | 'CV'
  /** Cayman Islands */
  | 'KY'
  /** Central African Republic */
  | 'CF'
  /** Chad */
  | 'TD'
  /** Chile */
  | 'CL'
  /** China */
  | 'CN'
  /** Christmas Island */
  | 'CX'
  /** Cocos (Keeling) Islands */
  | 'CC'
  /** Colombia */
  | 'CO'
  /** Comoros */
  | 'KM'
  /** Congo (Brazzaville) */
  | 'CG'
  /** Congo (Kinshasa) */
  | 'CD'
  /** Cook Islands */
  | 'CK'
  /** Costa Rica */
  | 'CR'
  /** Côte d'Ivoire */
  | 'CI'
  /** Croatia */
  | 'HR'
  /** Curaçao */
  | 'CW'
  /** Cyprus */
  | 'CY'
  /** Czech Republic */
  | 'CZ'
  /** Denmark */
  | 'DK'
  /** Djibouti */
  | 'DJ'
  /** Dominica */
  | 'DM'
  /** Dominican Republic */
  | 'DO'
  /** Ecuador */
  | 'EC'
  /** Egypt */
  | 'EG'
  /** El Salvador */
  | 'SV'
  /** Equatorial Guinea */
  | 'GQ'
  /** Eritrea */
  | 'ER'
  /** Estonia */
  | 'EE'
  /** Ethiopia */
  | 'ET'
  /** Falkland Islands */
  | 'FK'
  /** Faroe Islands */
  | 'FO'
  /** Fiji */
  | 'FJ'
  /** Finland */
  | 'FI'
  /** France */
  | 'FR'
  /** French Guiana */
  | 'GF'
  /** French Polynesia */
  | 'PF'
  /** French Southern Lands */
  | 'TF'
  /** Gabon */
  | 'GA'
  /** Gambia */
  | 'GM'
  /** Georgia */
  | 'GE'
  /** Germany */
  | 'DE'
  /** Ghana */
  | 'GH'
  /** Gibraltar */
  | 'GI'
  /** Greece */
  | 'GR'
  /** Greenland */
  | 'GL'
  /** Grenada */
  | 'GD'
  /** Guadeloupe */
  | 'GP'
  /** Guam */
  | 'GU'
  /** Guatemala */
  | 'GT'
  /** Guernsey */
  | 'GG'
  /** Guinea */
  | 'GN'
  /** Guinea-Bissau */
  | 'GW'
  /** Guyana */
  | 'GY'
  /** Haiti */
  | 'HT'
  /** Heard and McDonald Islands */
  | 'HM'
  /** Honduras */
  | 'HN'
  /** Hong Kong */
  | 'HK'
  /** Hungary */
  | 'HU'
  /** Iceland */
  | 'IS'
  /** India */
  | 'IN'
  /** Indonesia */
  | 'ID'
  /** Iran */
  | 'IR'
  /** Iraq */
  | 'IQ'
  /** Ireland */
  | 'IE'
  /** Isle of Man */
  | 'IM'
  /** Israel */
  | 'IL'
  /** Italy */
  | 'IT'
  /** Jamaica */
  | 'JM'
  /** Japan */
  | 'JP'
  /** Jersey */
  | 'JE'
  /** Jordan */
  | 'JO'
  /** Kazakhstan */
  | 'KZ'
  /** Kenya */
  | 'KE'
  /** Kiribati */
  | 'KI'
  /** Korea, South */
  | 'KR'
  /** Kuwait */
  | 'KW'
  /** Kyrgyzstan */
  | 'KG'
  /** Laos */
  | 'LA'
  /** Latvia */
  | 'LV'
  /** Lebanon */
  | 'LB'
  /** Lesotho */
  | 'LS'
  /** Liberia */
  | 'LR'
  /** Libya */
  | 'LY'
  /** Liechtenstein */
  | 'LI'
  /** Lithuania */
  | 'LT'
  /** Luxembourg */
  | 'LU'
  /** Macau */
  | 'MO'
  /** Macedonia */
  | 'MK'
  /** Madagascar */
  | 'MG'
  /** Malawi */
  | 'MW'
  /** Malaysia */
  | 'MY'
  /** Maldives */
  | 'MV'
  /** Mali */
  | 'ML'
  /** Malta */
  | 'MT'
  /** Marshall Islands */
  | 'MH'
  /** Martinique */
  | 'MQ'
  /** Mauritania */
  | 'MR'
  /** Mauritius */
  | 'MU'
  /** Mayotte */
  | 'YT'
  /** Mexico */
  | 'MX'
  /** Micronesia */
  | 'FM'
  /** Moldova */
  | 'MD'
  /** Monaco */
  | 'MC'
  /** Mongolia */
  | 'MN'
  /** Montenegro */
  | 'ME'
  /** Montserrat */
  | 'MS'
  /** Morocco */
  | 'MA'
  /** Mozambique */
  | 'MZ'
  /** Myanmar */
  | 'MM'
  /** Namibia */
  | 'NA'
  /** Nauru */
  | 'NR'
  /** Nepal */
  | 'NP'
  /** Netherlands */
  | 'NL'
  /** New Caledonia */
  | 'NC'
  /** New Zealand */
  | 'NZ'
  /** Nicaragua */
  | 'NI'
  /** Niger */
  | 'NE'
  /** Nigeria */
  | 'NG'
  /** Niue */
  | 'NU'
  /** Norfolk Island */
  | 'NF'
  /** Northern Mariana Islands */
  | 'MP'
  /** Norway */
  | 'NO'
  /** Oman */
  | 'OM'
  /** Pakistan */
  | 'PK'
  /** Palau */
  | 'PW'
  /** Palestine */
  | 'PS'
  /** Panama */
  | 'PA'
  /** Papua New Guinea */
  | 'PG'
  /** Paraguay */
  | 'PY'
  /** Peru */
  | 'PE'
  /** Philippines */
  | 'PH'
  /** Pitcairn */
  | 'PN'
  /** Poland */
  | 'PL'
  /** Portugal */
  | 'PT'
  /** Puerto Rico */
  | 'PR'
  /** Qatar */
  | 'QA'
  /** Reunion */
  | 'RE'
  /** Romania */
  | 'RO'
  /** Russian Federation */
  | 'RU'
  /** Rwanda */
  | 'RW'
  /** Saint Barthélemy */
  | 'BL'
  /** Saint Helena */
  | 'SH'
  /** Saint Kitts and Nevis */
  | 'KN'
  /** Saint Lucia */
  | 'LC'
  /** Saint Martin (French part) */
  | 'MF'
  /** Saint Pierre and Miquelon */
  | 'PM'
  /** Saint Vincent and the Grenadines */
  | 'VC'
  /** Samoa */
  | 'WS'
  /** San Marino */
  | 'SM'
  /** Sao Tome and Principe */
  | 'ST'
  /** Saudi Arabia */
  | 'SA'
  /** Senegal */
  | 'SN'
  /** Serbia */
  | 'RS'
  /** Seychelles */
  | 'SC'
  /** Sierra Leone */
  | 'SL'
  /** Singapore */
  | 'SG'
  /** Sint Maarten (Dutch part) */
  | 'SX'
  /** Slovakia */
  | 'SK'
  /** Slovenia */
  | 'SI'
  /** Solomon Islands */
  | 'SB'
  /** Somalia */
  | 'SO'
  /** South Africa */
  | 'ZA'
  /** South Georgia and South Sandwich Islands */
  | 'GS'
  /** South Sudan */
  | 'SS'
  /** Spain */
  | 'ES'
  /** Sri Lanka */
  | 'LK'
  /** Sudan */
  | 'SD'
  /** Suriname */
  | 'SR'
  /** Svalbard and Jan Mayen Islands */
  | 'SJ'
  /** Swaziland */
  | 'SZ'
  /** Sweden */
  | 'SE'
  /** Switzerland */
  | 'CH'
  /** Taiwan */
  | 'TW'
  /** Tajikistan */
  | 'TJ'
  /** Tanzania */
  | 'TZ'
  /** Thailand */
  | 'TH'
  /** Timor-Leste */
  | 'TL'
  /** Togo */
  | 'TG'
  /** Tokelau */
  | 'TK'
  /** Tonga */
  | 'TO'
  /** Trinidad and Tobago */
  | 'TT'
  /** Tunisia */
  | 'TN'
  /** Turkey */
  | 'TR'
  /** Turkmenistan */
  | 'TM'
  /** Turks and Caicos Islands */
  | 'TC'
  /** Tuvalu */
  | 'TV'
  /** Uganda */
  | 'UG'
  /** Ukraine */
  | 'UA'
  /** United Arab Emirates */
  | 'AE'
  /** United Kingdom */
  | 'GB'
  /** United States Minor Outlying Islands */
  | 'UM'
  /** United States of America */
  | 'US'
  /** Uruguay */
  | 'UY'
  /** Uzbekistan */
  | 'UZ'
  /** Vanuatu */
  | 'VU'
  /** Vatican City */
  | 'VA'
  /** Venezuela */
  | 'VE'
  /** Vietnam */
  | 'VN'
  /** Virgin Islands, British */
  | 'VG'
  /** Virgin Islands, U.S. */
  | 'VI'
  /** Wallis and Futuna Islands */
  | 'WF'
  /** Western Sahara */
  | 'EH'
  /** Yemen */
  | 'YE'
  /** Zambia */
  | 'ZM'
  /** Zimbabwe */
  | 'ZW';


/** The different kinds of goals a GitHub Sponsors member can have. */
export type SponsorsGoalKind =
  /** The goal is about reaching a certain number of sponsors. */
  | 'TOTAL_SPONSORS_COUNT'
  /** The goal is about getting a certain amount in USD from sponsorships each month. */
  | 'MONTHLY_SPONSORSHIP_AMOUNT';




/** The different kinds of records that can be featured on a GitHub Sponsors profile page. */
export type SponsorsListingFeaturedItemFeatureableType =
  /** A repository owned by the user or organization with the GitHub Sponsors profile. */
  | 'REPOSITORY'
  /** A user who belongs to the organization with the GitHub Sponsors profile. */
  | 'USER';





/** Ordering options for Sponsors tiers connections. */
export type SponsorsTierOrder = {
  /** The field to order tiers by. */
  field: SponsorsTierOrderField;
  /** The ordering direction. */
  direction: OrderDirection;
};

/** Properties by which Sponsors tiers connections can be ordered. */
export type SponsorsTierOrderField =
  /** Order tiers by creation time. */
  | 'CREATED_AT'
  /** Order tiers by their monthly price in cents */
  | 'MONTHLY_PRICE_IN_CENTS';







/** Ordering options for sponsorship newsletter connections. */
export type SponsorshipNewsletterOrder = {
  /** The field to order sponsorship newsletters by. */
  field: SponsorshipNewsletterOrderField;
  /** The ordering direction. */
  direction: OrderDirection;
};

/** Properties by which sponsorship update connections can be ordered. */
export type SponsorshipNewsletterOrderField =
  /** Order sponsorship newsletters by when they were created. */
  | 'CREATED_AT';

/** Ordering options for sponsorship connections. */
export type SponsorshipOrder = {
  /** The field to order sponsorship by. */
  field: SponsorshipOrderField;
  /** The ordering direction. */
  direction: OrderDirection;
};

/** Properties by which sponsorship connections can be ordered. */
export type SponsorshipOrderField =
  /** Order sponsorship by creation time. */
  | 'CREATED_AT';

/** The privacy of a sponsorship */
export type SponsorshipPrivacy =
  /** Public */
  | 'PUBLIC'
  /** Private */
  | 'PRIVATE';

/** The possible default commit messages for squash merges. */
export type SquashMergeCommitMessage =
  /** Default to the pull request's body. */
  | 'PR_BODY'
  /** Default to the branch's commit messages. */
  | 'COMMIT_MESSAGES'
  /** Default to a blank commit message. */
  | 'BLANK';

/** The possible default commit titles for squash merges. */
export type SquashMergeCommitTitle =
  /** Default to the pull request's title. */
  | 'PR_TITLE'
  /** Default to the commit's title (if only one commit) or the pull request's title (when more than one commit). */
  | 'COMMIT_OR_PR_TITLE';


/** Ways in which star connections can be ordered. */
export type StarOrder = {
  /** The field in which to order nodes by. */
  field: StarOrderField;
  /** The direction in which to order nodes. */
  direction: OrderDirection;
};

/** Properties by which star connections can be ordered. */
export type StarOrderField =
  /** Allows ordering a list of stars by when they were created. */
  | 'STARRED_AT';






/** Autogenerated input type of StartOrganizationMigration */
export type StartOrganizationMigrationInput = {
  /** The URL of the organization to migrate. */
  sourceOrgUrl: Scalars['URI'];
  /** The name of the target organization. */
  targetOrgName: Scalars['String'];
  /** The ID of the enterprise the target organization belongs to. */
  targetEnterpriseId: Scalars['ID'];
  /** The migration source access token. */
  sourceAccessToken: Scalars['String'];
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
};


/** Autogenerated input type of StartRepositoryMigration */
export type StartRepositoryMigrationInput = {
  /** The ID of the migration source. */
  sourceId: Scalars['ID'];
  /** The ID of the organization that will own the imported repository. */
  ownerId: Scalars['ID'];
  /** The URL of the source repository. */
  sourceRepositoryUrl?: Maybe<Scalars['URI']>;
  /** The name of the imported repository. */
  repositoryName: Scalars['String'];
  /** Whether to continue the migration on error. Defaults to `false`. */
  continueOnError?: Maybe<Scalars['Boolean']>;
  /** The signed URL to access the user-uploaded git archive. */
  gitArchiveUrl?: Maybe<Scalars['String']>;
  /** The signed URL to access the user-uploaded metadata archive. */
  metadataArchiveUrl?: Maybe<Scalars['String']>;
  /** The migration source access token. */
  accessToken?: Maybe<Scalars['String']>;
  /** The GitHub personal access token of the user importing to the target repository. */
  githubPat?: Maybe<Scalars['String']>;
  /** Whether to skip migrating releases for the repository. */
  skipReleases?: Maybe<Scalars['Boolean']>;
  /** The visibility of the imported repository. */
  targetRepoVisibility?: Maybe<Scalars['String']>;
  /** Whether to lock the source repository. */
  lockSource?: Maybe<Scalars['Boolean']>;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
};




/** Required status check */
export type StatusCheckConfigurationInput = {
  /** The status check context name that must be present on the commit. */
  context: Scalars['String'];
  /** The optional integration ID that this status check must originate from. */
  integrationId?: Maybe<Scalars['Int']>;
};







/** The possible commit status states. */
export type StatusState =
  /** Status is expected. */
  | 'EXPECTED'
  /** Status is errored. */
  | 'ERROR'
  /** Status is failing. */
  | 'FAILURE'
  /** Status is pending. */
  | 'PENDING'
  /** Status is successful. */
  | 'SUCCESS';


/** Autogenerated input type of SubmitPullRequestReview */
export type SubmitPullRequestReviewInput = {
  /** The Pull Request ID to submit any pending reviews. */
  pullRequestId?: Maybe<Scalars['ID']>;
  /** The Pull Request Review ID to submit. */
  pullRequestReviewId?: Maybe<Scalars['ID']>;
  /** The event to send to the Pull Request Review. */
  event: PullRequestReviewEvent;
  /** The text field to set on the Pull Request Review. */
  body?: Maybe<Scalars['String']>;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
};







/** The possible states of a subscription. */
export type SubscriptionState =
  /** The User is only notified when participating or @mentioned. */
  | 'UNSUBSCRIBED'
  /** The User is notified of all conversations. */
  | 'SUBSCRIBED'
  /** The User is never notified. */
  | 'IGNORED';




/** Parameters to be used for the tag_name_pattern rule */
export type TagNamePatternParametersInput = {
  /** How this rule will appear to users. */
  name?: Maybe<Scalars['String']>;
  /** If true, the rule will fail if the pattern matches. */
  negate?: Maybe<Scalars['Boolean']>;
  /** The operator to use for matching. */
  operator: Scalars['String'];
  /** The pattern to match with. */
  pattern: Scalars['String'];
};











/** Ways in which team discussion comment connections can be ordered. */
export type TeamDiscussionCommentOrder = {
  /** The field by which to order nodes. */
  field: TeamDiscussionCommentOrderField;
  /** The direction in which to order nodes. */
  direction: OrderDirection;
};

/** Properties by which team discussion comment connections can be ordered. */
export type TeamDiscussionCommentOrderField =
  /** Allows sequential ordering of team discussion comments (which is equivalent to chronological ordering). */
  | 'NUMBER';



/** Ways in which team discussion connections can be ordered. */
export type TeamDiscussionOrder = {
  /** The field by which to order nodes. */
  field: TeamDiscussionOrderField;
  /** The direction in which to order nodes. */
  direction: OrderDirection;
};

/** Properties by which team discussion connections can be ordered. */
export type TeamDiscussionOrderField =
  /** Allows chronological ordering of team discussions. */
  | 'CREATED_AT';




/** Ordering options for team member connections */
export type TeamMemberOrder = {
  /** The field to order team members by. */
  field: TeamMemberOrderField;
  /** The ordering direction. */
  direction: OrderDirection;
};

/** Properties by which team member connections can be ordered. */
export type TeamMemberOrderField =
  /** Order team members by login */
  | 'LOGIN'
  /** Order team members by creation time */
  | 'CREATED_AT';

/** The possible team member roles; either 'maintainer' or 'member'. */
export type TeamMemberRole =
  /** A team maintainer has permission to add and remove team members. */
  | 'MAINTAINER'
  /** A team member has no administrative permissions on the team. */
  | 'MEMBER';

/** Defines which types of team members are included in the returned list. Can be one of IMMEDIATE, CHILD_TEAM or ALL. */
export type TeamMembershipType =
  /** Includes only immediate members of the team. */
  | 'IMMEDIATE'
  /** Includes only child team members for the team. */
  | 'CHILD_TEAM'
  /** Includes immediate and child team members for the team. */
  | 'ALL';

/** The possible team notification values. */
export type TeamNotificationSetting =
  /** Everyone will receive notifications when the team is @mentioned. */
  | 'NOTIFICATIONS_ENABLED'
  /** No one will receive notifications. */
  | 'NOTIFICATIONS_DISABLED';

/** Ways in which team connections can be ordered. */
export type TeamOrder = {
  /** The field in which to order nodes by. */
  field: TeamOrderField;
  /** The direction in which to order nodes. */
  direction: OrderDirection;
};

/** Properties by which team connections can be ordered. */
export type TeamOrderField =
  /** Allows ordering a list of teams by name. */
  | 'NAME';

/** The possible team privacy values. */
export type TeamPrivacy =
  /** A secret team can only be seen by its members. */
  | 'SECRET'
  /** A visible team can be seen and @mentioned by every member of the organization. */
  | 'VISIBLE';





/** Ordering options for team repository connections */
export type TeamRepositoryOrder = {
  /** The field to order repositories by. */
  field: TeamRepositoryOrderField;
  /** The ordering direction. */
  direction: OrderDirection;
};

/** Properties by which team repository connections can be ordered. */
export type TeamRepositoryOrderField =
  /** Order repositories by creation time */
  | 'CREATED_AT'
  /** Order repositories by update time */
  | 'UPDATED_AT'
  /** Order repositories by push time */
  | 'PUSHED_AT'
  /** Order repositories by name */
  | 'NAME'
  /** Order repositories by permission */
  | 'PERMISSION'
  /** Order repositories by number of stargazers */
  | 'STARGAZERS';

/** The role of a user on a team. */
export type TeamRole =
  /** User has admin rights on the team. */
  | 'ADMIN'
  /** User is a member of the team. */
  | 'MEMBER';





/** Reason that the suggested topic is declined. */
export type TopicSuggestionDeclineReason =
  /** The suggested topic is not relevant to the repository. */
  | 'NOT_RELEVANT'
  /** The suggested topic is too specific for the repository (e.g. #ruby-on-rails-version-4-2-1). */
  | 'TOO_SPECIFIC'
  /** The viewer does not like the suggested topic. */
  | 'PERSONAL_PREFERENCE'
  /** The suggested topic is too general for the repository. */
  | 'TOO_GENERAL';

/** The possible states of a tracked issue. */
export type TrackedIssueStates =
  /** The tracked issue is open */
  | 'OPEN'
  /** The tracked issue is closed */
  | 'CLOSED';

/** Autogenerated input type of TransferEnterpriseOrganization */
export type TransferEnterpriseOrganizationInput = {
  /** The ID of the organization to transfer. */
  organizationId: Scalars['ID'];
  /** The ID of the enterprise where the organization should be transferred. */
  destinationEnterpriseId: Scalars['ID'];
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
};


/** Autogenerated input type of TransferIssue */
export type TransferIssueInput = {
  /** The Node ID of the issue to be transferred */
  issueId: Scalars['ID'];
  /** The Node ID of the repository the issue should be transferred to */
  repositoryId: Scalars['ID'];
  /** Whether to create labels if they don't exist in the target repository (matched by name) */
  createLabelsIfMissing?: Maybe<Scalars['Boolean']>;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
};






/** Autogenerated input type of UnarchiveProjectV2Item */
export type UnarchiveProjectV2ItemInput = {
  /** The ID of the Project to archive the item from. */
  projectId: Scalars['ID'];
  /** The ID of the ProjectV2Item to unarchive. */
  itemId: Scalars['ID'];
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
};


/** Autogenerated input type of UnarchiveRepository */
export type UnarchiveRepositoryInput = {
  /** The ID of the repository to unarchive. */
  repositoryId: Scalars['ID'];
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
};



/** Autogenerated input type of UnfollowOrganization */
export type UnfollowOrganizationInput = {
  /** ID of the organization to unfollow. */
  organizationId: Scalars['ID'];
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
};


/** Autogenerated input type of UnfollowUser */
export type UnfollowUserInput = {
  /** ID of the user to unfollow. */
  userId: Scalars['ID'];
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
};





/** Autogenerated input type of UnlinkProjectV2FromRepository */
export type UnlinkProjectV2FromRepositoryInput = {
  /** The ID of the project to unlink from the repository. */
  projectId: Scalars['ID'];
  /** The ID of the repository to unlink from the project. */
  repositoryId: Scalars['ID'];
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
};


/** Autogenerated input type of UnlinkProjectV2FromTeam */
export type UnlinkProjectV2FromTeamInput = {
  /** The ID of the project to unlink from the team. */
  projectId: Scalars['ID'];
  /** The ID of the team to unlink from the project. */
  teamId: Scalars['ID'];
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
};


/** Autogenerated input type of UnlinkRepositoryFromProject */
export type UnlinkRepositoryFromProjectInput = {
  /** The ID of the Project linked to the Repository. */
  projectId: Scalars['ID'];
  /** The ID of the Repository linked to the Project. */
  repositoryId: Scalars['ID'];
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
};


/** Autogenerated input type of UnlockLockable */
export type UnlockLockableInput = {
  /** ID of the item to be unlocked. */
  lockableId: Scalars['ID'];
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
};



/** Autogenerated input type of UnmarkDiscussionCommentAsAnswer */
export type UnmarkDiscussionCommentAsAnswerInput = {
  /** The Node ID of the discussion comment to unmark as an answer. */
  id: Scalars['ID'];
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
};


/** Autogenerated input type of UnmarkFileAsViewed */
export type UnmarkFileAsViewedInput = {
  /** The Node ID of the pull request. */
  pullRequestId: Scalars['ID'];
  /** The path of the file to mark as unviewed */
  path: Scalars['String'];
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
};


/** Autogenerated input type of UnmarkIssueAsDuplicate */
export type UnmarkIssueAsDuplicateInput = {
  /** ID of the issue or pull request currently marked as a duplicate. */
  duplicateId: Scalars['ID'];
  /** ID of the issue or pull request currently considered canonical/authoritative/original. */
  canonicalId: Scalars['ID'];
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
};



/** Autogenerated input type of UnminimizeComment */
export type UnminimizeCommentInput = {
  /** The Node ID of the subject to modify. */
  subjectId: Scalars['ID'];
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
};


/** Autogenerated input type of UnpinIssue */
export type UnpinIssueInput = {
  /** The ID of the issue to be unpinned */
  issueId: Scalars['ID'];
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
};



/** Autogenerated input type of UnresolveReviewThread */
export type UnresolveReviewThreadInput = {
  /** The ID of the thread to unresolve */
  threadId: Scalars['ID'];
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
};





/** Autogenerated input type of UpdateBranchProtectionRule */
export type UpdateBranchProtectionRuleInput = {
  /** The global relay id of the branch protection rule to be updated. */
  branchProtectionRuleId: Scalars['ID'];
  /** The glob-like pattern used to determine matching branches. */
  pattern?: Maybe<Scalars['String']>;
  /** Are approving reviews required to update matching branches. */
  requiresApprovingReviews?: Maybe<Scalars['Boolean']>;
  /** Number of approving reviews required to update matching branches. */
  requiredApprovingReviewCount?: Maybe<Scalars['Int']>;
  /** Are commits required to be signed. */
  requiresCommitSignatures?: Maybe<Scalars['Boolean']>;
  /** Are merge commits prohibited from being pushed to this branch. */
  requiresLinearHistory?: Maybe<Scalars['Boolean']>;
  /** Is branch creation a protected operation. */
  blocksCreations?: Maybe<Scalars['Boolean']>;
  /** Are force pushes allowed on this branch. */
  allowsForcePushes?: Maybe<Scalars['Boolean']>;
  /** Can this branch be deleted. */
  allowsDeletions?: Maybe<Scalars['Boolean']>;
  /** Can admins overwrite branch protection. */
  isAdminEnforced?: Maybe<Scalars['Boolean']>;
  /** Are status checks required to update matching branches. */
  requiresStatusChecks?: Maybe<Scalars['Boolean']>;
  /** Are branches required to be up to date before merging. */
  requiresStrictStatusChecks?: Maybe<Scalars['Boolean']>;
  /** Are reviews from code owners required to update matching branches. */
  requiresCodeOwnerReviews?: Maybe<Scalars['Boolean']>;
  /** Will new commits pushed to matching branches dismiss pull request review approvals. */
  dismissesStaleReviews?: Maybe<Scalars['Boolean']>;
  /** Is dismissal of pull request reviews restricted. */
  restrictsReviewDismissals?: Maybe<Scalars['Boolean']>;
  /** A list of User, Team, or App IDs allowed to dismiss reviews on pull requests targeting matching branches. */
  reviewDismissalActorIds?: Maybe<Array<Scalars['ID']>>;
  /** A list of User, Team, or App IDs allowed to bypass pull requests targeting matching branches. */
  bypassPullRequestActorIds?: Maybe<Array<Scalars['ID']>>;
  /** A list of User, Team, or App IDs allowed to bypass force push targeting matching branches. */
  bypassForcePushActorIds?: Maybe<Array<Scalars['ID']>>;
  /** Is pushing to matching branches restricted. */
  restrictsPushes?: Maybe<Scalars['Boolean']>;
  /** A list of User, Team, or App IDs allowed to push to matching branches. */
  pushActorIds?: Maybe<Array<Scalars['ID']>>;
  /** List of required status check contexts that must pass for commits to be accepted to matching branches. */
  requiredStatusCheckContexts?: Maybe<Array<Scalars['String']>>;
  /** The list of required status checks */
  requiredStatusChecks?: Maybe<Array<RequiredStatusCheckInput>>;
  /** Are successful deployments required before merging. */
  requiresDeployments?: Maybe<Scalars['Boolean']>;
  /** The list of required deployment environments */
  requiredDeploymentEnvironments?: Maybe<Array<Scalars['String']>>;
  /** Are conversations required to be resolved before merging. */
  requiresConversationResolution?: Maybe<Scalars['Boolean']>;
  /** Whether the most recent push must be approved by someone other than the person who pushed it */
  requireLastPushApproval?: Maybe<Scalars['Boolean']>;
  /** Whether to set the branch as read-only. If this is true, users will not be able to push to the branch. */
  lockBranch?: Maybe<Scalars['Boolean']>;
  /** Whether users can pull changes from upstream when the branch is locked. Set to `true` to allow fork syncing. Set to `false` to prevent fork syncing. */
  lockAllowsFetchAndMerge?: Maybe<Scalars['Boolean']>;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
};


/** Autogenerated input type of UpdateCheckRun */
export type UpdateCheckRunInput = {
  /** The node ID of the repository. */
  repositoryId: Scalars['ID'];
  /** The node of the check. */
  checkRunId: Scalars['ID'];
  /** The name of the check. */
  name?: Maybe<Scalars['String']>;
  /** The URL of the integrator's site that has the full details of the check. */
  detailsUrl?: Maybe<Scalars['URI']>;
  /** A reference for the run on the integrator's system. */
  externalId?: Maybe<Scalars['String']>;
  /** The current status. */
  status?: Maybe<RequestableCheckStatusState>;
  /** The time that the check run began. */
  startedAt?: Maybe<Scalars['DateTime']>;
  /** The final conclusion of the check. */
  conclusion?: Maybe<CheckConclusionState>;
  /** The time that the check run finished. */
  completedAt?: Maybe<Scalars['DateTime']>;
  /** Descriptive details about the run. */
  output?: Maybe<CheckRunOutput>;
  /** Possible further actions the integrator can perform, which a user may trigger. */
  actions?: Maybe<Array<CheckRunAction>>;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
};


/** Autogenerated input type of UpdateCheckSuitePreferences */
export type UpdateCheckSuitePreferencesInput = {
  /** The Node ID of the repository. */
  repositoryId: Scalars['ID'];
  /** The check suite preferences to modify. */
  autoTriggerPreferences: Array<CheckSuiteAutoTriggerPreference>;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
};


/** Autogenerated input type of UpdateDiscussionComment */
export type UpdateDiscussionCommentInput = {
  /** The Node ID of the discussion comment to update. */
  commentId: Scalars['ID'];
  /** The new contents of the comment body. */
  body: Scalars['String'];
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
};


/** Autogenerated input type of UpdateDiscussion */
export type UpdateDiscussionInput = {
  /** The Node ID of the discussion to update. */
  discussionId: Scalars['ID'];
  /** The new discussion title. */
  title?: Maybe<Scalars['String']>;
  /** The new contents of the discussion body. */
  body?: Maybe<Scalars['String']>;
  /** The Node ID of a discussion category within the same repository to change this discussion to. */
  categoryId?: Maybe<Scalars['ID']>;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
};


/** Autogenerated input type of UpdateEnterpriseAdministratorRole */
export type UpdateEnterpriseAdministratorRoleInput = {
  /** The ID of the Enterprise which the admin belongs to. */
  enterpriseId: Scalars['ID'];
  /** The login of a administrator whose role is being changed. */
  login: Scalars['String'];
  /** The new role for the Enterprise administrator. */
  role: EnterpriseAdministratorRole;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
};


/** Autogenerated input type of UpdateEnterpriseAllowPrivateRepositoryForkingSetting */
export type UpdateEnterpriseAllowPrivateRepositoryForkingSettingInput = {
  /** The ID of the enterprise on which to set the allow private repository forking setting. */
  enterpriseId: Scalars['ID'];
  /** The value for the allow private repository forking setting on the enterprise. */
  settingValue: EnterpriseEnabledDisabledSettingValue;
  /** The value for the allow private repository forking policy on the enterprise. */
  policyValue?: Maybe<EnterpriseAllowPrivateRepositoryForkingPolicyValue>;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
};


/** Autogenerated input type of UpdateEnterpriseDefaultRepositoryPermissionSetting */
export type UpdateEnterpriseDefaultRepositoryPermissionSettingInput = {
  /** The ID of the enterprise on which to set the base repository permission setting. */
  enterpriseId: Scalars['ID'];
  /** The value for the base repository permission setting on the enterprise. */
  settingValue: EnterpriseDefaultRepositoryPermissionSettingValue;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
};


/** Autogenerated input type of UpdateEnterpriseMembersCanChangeRepositoryVisibilitySetting */
export type UpdateEnterpriseMembersCanChangeRepositoryVisibilitySettingInput = {
  /** The ID of the enterprise on which to set the members can change repository visibility setting. */
  enterpriseId: Scalars['ID'];
  /** The value for the members can change repository visibility setting on the enterprise. */
  settingValue: EnterpriseEnabledDisabledSettingValue;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
};


/** Autogenerated input type of UpdateEnterpriseMembersCanCreateRepositoriesSetting */
export type UpdateEnterpriseMembersCanCreateRepositoriesSettingInput = {
  /** The ID of the enterprise on which to set the members can create repositories setting. */
  enterpriseId: Scalars['ID'];
  /** Value for the members can create repositories setting on the enterprise. This or the granular public/private/internal allowed fields (but not both) must be provided. */
  settingValue?: Maybe<EnterpriseMembersCanCreateRepositoriesSettingValue>;
  /** When false, allow member organizations to set their own repository creation member privileges. */
  membersCanCreateRepositoriesPolicyEnabled?: Maybe<Scalars['Boolean']>;
  /** Allow members to create public repositories. Defaults to current value. */
  membersCanCreatePublicRepositories?: Maybe<Scalars['Boolean']>;
  /** Allow members to create private repositories. Defaults to current value. */
  membersCanCreatePrivateRepositories?: Maybe<Scalars['Boolean']>;
  /** Allow members to create internal repositories. Defaults to current value. */
  membersCanCreateInternalRepositories?: Maybe<Scalars['Boolean']>;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
};


/** Autogenerated input type of UpdateEnterpriseMembersCanDeleteIssuesSetting */
export type UpdateEnterpriseMembersCanDeleteIssuesSettingInput = {
  /** The ID of the enterprise on which to set the members can delete issues setting. */
  enterpriseId: Scalars['ID'];
  /** The value for the members can delete issues setting on the enterprise. */
  settingValue: EnterpriseEnabledDisabledSettingValue;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
};


/** Autogenerated input type of UpdateEnterpriseMembersCanDeleteRepositoriesSetting */
export type UpdateEnterpriseMembersCanDeleteRepositoriesSettingInput = {
  /** The ID of the enterprise on which to set the members can delete repositories setting. */
  enterpriseId: Scalars['ID'];
  /** The value for the members can delete repositories setting on the enterprise. */
  settingValue: EnterpriseEnabledDisabledSettingValue;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
};


/** Autogenerated input type of UpdateEnterpriseMembersCanInviteCollaboratorsSetting */
export type UpdateEnterpriseMembersCanInviteCollaboratorsSettingInput = {
  /** The ID of the enterprise on which to set the members can invite collaborators setting. */
  enterpriseId: Scalars['ID'];
  /** The value for the members can invite collaborators setting on the enterprise. */
  settingValue: EnterpriseEnabledDisabledSettingValue;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
};


/** Autogenerated input type of UpdateEnterpriseMembersCanMakePurchasesSetting */
export type UpdateEnterpriseMembersCanMakePurchasesSettingInput = {
  /** The ID of the enterprise on which to set the members can make purchases setting. */
  enterpriseId: Scalars['ID'];
  /** The value for the members can make purchases setting on the enterprise. */
  settingValue: EnterpriseMembersCanMakePurchasesSettingValue;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
};


/** Autogenerated input type of UpdateEnterpriseMembersCanUpdateProtectedBranchesSetting */
export type UpdateEnterpriseMembersCanUpdateProtectedBranchesSettingInput = {
  /** The ID of the enterprise on which to set the members can update protected branches setting. */
  enterpriseId: Scalars['ID'];
  /** The value for the members can update protected branches setting on the enterprise. */
  settingValue: EnterpriseEnabledDisabledSettingValue;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
};


/** Autogenerated input type of UpdateEnterpriseMembersCanViewDependencyInsightsSetting */
export type UpdateEnterpriseMembersCanViewDependencyInsightsSettingInput = {
  /** The ID of the enterprise on which to set the members can view dependency insights setting. */
  enterpriseId: Scalars['ID'];
  /** The value for the members can view dependency insights setting on the enterprise. */
  settingValue: EnterpriseEnabledDisabledSettingValue;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
};


/** Autogenerated input type of UpdateEnterpriseOrganizationProjectsSetting */
export type UpdateEnterpriseOrganizationProjectsSettingInput = {
  /** The ID of the enterprise on which to set the organization projects setting. */
  enterpriseId: Scalars['ID'];
  /** The value for the organization projects setting on the enterprise. */
  settingValue: EnterpriseEnabledDisabledSettingValue;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
};


/** Autogenerated input type of UpdateEnterpriseOwnerOrganizationRole */
export type UpdateEnterpriseOwnerOrganizationRoleInput = {
  /** The ID of the Enterprise which the owner belongs to. */
  enterpriseId: Scalars['ID'];
  /** The ID of the organization for membership change. */
  organizationId: Scalars['ID'];
  /** The role to assume in the organization. */
  organizationRole: RoleInOrganization;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
};


/** Autogenerated input type of UpdateEnterpriseProfile */
export type UpdateEnterpriseProfileInput = {
  /** The Enterprise ID to update. */
  enterpriseId: Scalars['ID'];
  /** The name of the enterprise. */
  name?: Maybe<Scalars['String']>;
  /** The description of the enterprise. */
  description?: Maybe<Scalars['String']>;
  /** The URL of the enterprise's website. */
  websiteUrl?: Maybe<Scalars['String']>;
  /** The location of the enterprise. */
  location?: Maybe<Scalars['String']>;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
};


/** Autogenerated input type of UpdateEnterpriseRepositoryProjectsSetting */
export type UpdateEnterpriseRepositoryProjectsSettingInput = {
  /** The ID of the enterprise on which to set the repository projects setting. */
  enterpriseId: Scalars['ID'];
  /** The value for the repository projects setting on the enterprise. */
  settingValue: EnterpriseEnabledDisabledSettingValue;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
};


/** Autogenerated input type of UpdateEnterpriseTeamDiscussionsSetting */
export type UpdateEnterpriseTeamDiscussionsSettingInput = {
  /** The ID of the enterprise on which to set the team discussions setting. */
  enterpriseId: Scalars['ID'];
  /** The value for the team discussions setting on the enterprise. */
  settingValue: EnterpriseEnabledDisabledSettingValue;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
};


/** Autogenerated input type of UpdateEnterpriseTwoFactorAuthenticationRequiredSetting */
export type UpdateEnterpriseTwoFactorAuthenticationRequiredSettingInput = {
  /** The ID of the enterprise on which to set the two factor authentication required setting. */
  enterpriseId: Scalars['ID'];
  /** The value for the two factor authentication required setting on the enterprise. */
  settingValue: EnterpriseEnabledSettingValue;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
};


/** Autogenerated input type of UpdateEnvironment */
export type UpdateEnvironmentInput = {
  /** The node ID of the environment. */
  environmentId: Scalars['ID'];
  /** The wait timer in minutes. */
  waitTimer?: Maybe<Scalars['Int']>;
  /** The ids of users or teams that can approve deployments to this environment */
  reviewers?: Maybe<Array<Scalars['ID']>>;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
};


/** Autogenerated input type of UpdateIpAllowListEnabledSetting */
export type UpdateIpAllowListEnabledSettingInput = {
  /** The ID of the owner on which to set the IP allow list enabled setting. */
  ownerId: Scalars['ID'];
  /** The value for the IP allow list enabled setting. */
  settingValue: IpAllowListEnabledSettingValue;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
};


/** Autogenerated input type of UpdateIpAllowListEntry */
export type UpdateIpAllowListEntryInput = {
  /** The ID of the IP allow list entry to update. */
  ipAllowListEntryId: Scalars['ID'];
  /** An IP address or range of addresses in CIDR notation. */
  allowListValue: Scalars['String'];
  /** An optional name for the IP allow list entry. */
  name?: Maybe<Scalars['String']>;
  /** Whether the IP allow list entry is active when an IP allow list is enabled. */
  isActive: Scalars['Boolean'];
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
};


/** Autogenerated input type of UpdateIpAllowListForInstalledAppsEnabledSetting */
export type UpdateIpAllowListForInstalledAppsEnabledSettingInput = {
  /** The ID of the owner. */
  ownerId: Scalars['ID'];
  /** The value for the IP allow list configuration for installed GitHub Apps setting. */
  settingValue: IpAllowListForInstalledAppsEnabledSettingValue;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
};


/** Autogenerated input type of UpdateIssueComment */
export type UpdateIssueCommentInput = {
  /** The ID of the IssueComment to modify. */
  id: Scalars['ID'];
  /** The updated text of the comment. */
  body: Scalars['String'];
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
};


/** Autogenerated input type of UpdateIssue */
export type UpdateIssueInput = {
  /** The ID of the Issue to modify. */
  id: Scalars['ID'];
  /** The title for the issue. */
  title?: Maybe<Scalars['String']>;
  /** The body for the issue description. */
  body?: Maybe<Scalars['String']>;
  /** An array of Node IDs of users for this issue. */
  assigneeIds?: Maybe<Array<Scalars['ID']>>;
  /** The Node ID of the milestone for this issue. */
  milestoneId?: Maybe<Scalars['ID']>;
  /** An array of Node IDs of labels for this issue. */
  labelIds?: Maybe<Array<Scalars['ID']>>;
  /** The desired issue state. */
  state?: Maybe<IssueState>;
  /** An array of Node IDs for projects associated with this issue. */
  projectIds?: Maybe<Array<Scalars['ID']>>;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
};


/** Autogenerated input type of UpdateNotificationRestrictionSetting */
export type UpdateNotificationRestrictionSettingInput = {
  /** The ID of the owner on which to set the restrict notifications setting. */
  ownerId: Scalars['ID'];
  /** The value for the restrict notifications setting. */
  settingValue: NotificationRestrictionSettingValue;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
};


/** Autogenerated input type of UpdateOrganizationAllowPrivateRepositoryForkingSetting */
export type UpdateOrganizationAllowPrivateRepositoryForkingSettingInput = {
  /** The ID of the organization on which to set the allow private repository forking setting. */
  organizationId: Scalars['ID'];
  /** Enable forking of private repositories in the organization? */
  forkingEnabled: Scalars['Boolean'];
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
};


/** Autogenerated input type of UpdateOrganizationWebCommitSignoffSetting */
export type UpdateOrganizationWebCommitSignoffSettingInput = {
  /** The ID of the organization on which to set the web commit signoff setting. */
  organizationId: Scalars['ID'];
  /** Enable signoff on web-based commits for repositories in the organization? */
  webCommitSignoffRequired: Scalars['Boolean'];
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
};



/** Only allow users with bypass permission to update matching refs. */
export type UpdateParametersInput = {
  /** Branch can pull changes from its upstream repository */
  updateAllowsFetchAndMerge: Scalars['Boolean'];
};

/** Autogenerated input type of UpdateProjectCard */
export type UpdateProjectCardInput = {
  /** The ProjectCard ID to update. */
  projectCardId: Scalars['ID'];
  /** Whether or not the ProjectCard should be archived */
  isArchived?: Maybe<Scalars['Boolean']>;
  /** The note of ProjectCard. */
  note?: Maybe<Scalars['String']>;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
};


/** Autogenerated input type of UpdateProjectColumn */
export type UpdateProjectColumnInput = {
  /** The ProjectColumn ID to update. */
  projectColumnId: Scalars['ID'];
  /** The name of project column. */
  name: Scalars['String'];
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
};


/** Autogenerated input type of UpdateProject */
export type UpdateProjectInput = {
  /** The Project ID to update. */
  projectId: Scalars['ID'];
  /** The name of project. */
  name?: Maybe<Scalars['String']>;
  /** The description of project. */
  body?: Maybe<Scalars['String']>;
  /** Whether the project is open or closed. */
  state?: Maybe<ProjectState>;
  /** Whether the project is public or not. */
  public?: Maybe<Scalars['Boolean']>;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
};


/** Autogenerated input type of UpdateProjectV2DraftIssue */
export type UpdateProjectV2DraftIssueInput = {
  /** The ID of the draft issue to update. */
  draftIssueId: Scalars['ID'];
  /** The title of the draft issue. */
  title?: Maybe<Scalars['String']>;
  /** The body of the draft issue. */
  body?: Maybe<Scalars['String']>;
  /** The IDs of the assignees of the draft issue. */
  assigneeIds?: Maybe<Array<Scalars['ID']>>;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
};


/** Autogenerated input type of UpdateProjectV2 */
export type UpdateProjectV2Input = {
  /** The ID of the Project to update. */
  projectId: Scalars['ID'];
  /** Set the title of the project. */
  title?: Maybe<Scalars['String']>;
  /** Set the short description of the project. */
  shortDescription?: Maybe<Scalars['String']>;
  /** Set the readme description of the project. */
  readme?: Maybe<Scalars['String']>;
  /** Set the project to closed or open. */
  closed?: Maybe<Scalars['Boolean']>;
  /** Set the project to public or private. */
  public?: Maybe<Scalars['Boolean']>;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
};

/** Autogenerated input type of UpdateProjectV2ItemFieldValue */
export type UpdateProjectV2ItemFieldValueInput = {
  /** The ID of the Project. */
  projectId: Scalars['ID'];
  /** The ID of the item to be updated. */
  itemId: Scalars['ID'];
  /** The ID of the field to be updated. */
  fieldId: Scalars['ID'];
  /** The value which will be set on the field. */
  value: ProjectV2FieldValue;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
};


/** Autogenerated input type of UpdateProjectV2ItemPosition */
export type UpdateProjectV2ItemPositionInput = {
  /** The ID of the Project. */
  projectId: Scalars['ID'];
  /** The ID of the item to be moved. */
  itemId: Scalars['ID'];
  /** The ID of the item to position this item after. If omitted or set to null the item will be moved to top. */
  afterId?: Maybe<Scalars['ID']>;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
};



/** Autogenerated input type of UpdatePullRequestBranch */
export type UpdatePullRequestBranchInput = {
  /** The Node ID of the pull request. */
  pullRequestId: Scalars['ID'];
  /** The head ref oid for the upstream branch. */
  expectedHeadOid?: Maybe<Scalars['GitObjectID']>;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
};


/** Autogenerated input type of UpdatePullRequest */
export type UpdatePullRequestInput = {
  /** The Node ID of the pull request. */
  pullRequestId: Scalars['ID'];
  /**
   * The name of the branch you want your changes pulled into. This should be an existing branch
   * on the current repository.
   */
  baseRefName?: Maybe<Scalars['String']>;
  /** The title of the pull request. */
  title?: Maybe<Scalars['String']>;
  /** The contents of the pull request. */
  body?: Maybe<Scalars['String']>;
  /** The target state of the pull request. */
  state?: Maybe<PullRequestUpdateState>;
  /** Indicates whether maintainers can modify the pull request. */
  maintainerCanModify?: Maybe<Scalars['Boolean']>;
  /** An array of Node IDs of users for this pull request. */
  assigneeIds?: Maybe<Array<Scalars['ID']>>;
  /** The Node ID of the milestone for this pull request. */
  milestoneId?: Maybe<Scalars['ID']>;
  /** An array of Node IDs of labels for this pull request. */
  labelIds?: Maybe<Array<Scalars['ID']>>;
  /** An array of Node IDs for projects associated with this pull request. */
  projectIds?: Maybe<Array<Scalars['ID']>>;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
};


/** Autogenerated input type of UpdatePullRequestReviewComment */
export type UpdatePullRequestReviewCommentInput = {
  /** The Node ID of the comment to modify. */
  pullRequestReviewCommentId: Scalars['ID'];
  /** The text of the comment. */
  body: Scalars['String'];
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
};


/** Autogenerated input type of UpdatePullRequestReview */
export type UpdatePullRequestReviewInput = {
  /** The Node ID of the pull request review to modify. */
  pullRequestReviewId: Scalars['ID'];
  /** The contents of the pull request review body. */
  body: Scalars['String'];
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
};


/** Autogenerated input type of UpdateRef */
export type UpdateRefInput = {
  /** The Node ID of the Ref to be updated. */
  refId: Scalars['ID'];
  /** The GitObjectID that the Ref shall be updated to target. */
  oid: Scalars['GitObjectID'];
  /** Permit updates of branch Refs that are not fast-forwards? */
  force?: Maybe<Scalars['Boolean']>;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
};


/** Autogenerated input type of UpdateRepository */
export type UpdateRepositoryInput = {
  /** The ID of the repository to update. */
  repositoryId: Scalars['ID'];
  /** The new name of the repository. */
  name?: Maybe<Scalars['String']>;
  /** A new description for the repository. Pass an empty string to erase the existing description. */
  description?: Maybe<Scalars['String']>;
  /** Whether this repository should be marked as a template such that anyone who can access it can create new repositories with the same files and directory structure. */
  template?: Maybe<Scalars['Boolean']>;
  /** The URL for a web page about this repository. Pass an empty string to erase the existing URL. */
  homepageUrl?: Maybe<Scalars['URI']>;
  /** Indicates if the repository should have the wiki feature enabled. */
  hasWikiEnabled?: Maybe<Scalars['Boolean']>;
  /** Indicates if the repository should have the issues feature enabled. */
  hasIssuesEnabled?: Maybe<Scalars['Boolean']>;
  /** Indicates if the repository should have the project boards feature enabled. */
  hasProjectsEnabled?: Maybe<Scalars['Boolean']>;
  /** Indicates if the repository should have the discussions feature enabled. */
  hasDiscussionsEnabled?: Maybe<Scalars['Boolean']>;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
};


/** Autogenerated input type of UpdateRepositoryRuleset */
export type UpdateRepositoryRulesetInput = {
  /** The global relay id of the repository ruleset to be updated. */
  repositoryRulesetId: Scalars['ID'];
  /** The name of the ruleset. */
  name?: Maybe<Scalars['String']>;
  /** The target of the ruleset. */
  target?: Maybe<RepositoryRulesetTarget>;
  /** The list of rules for this ruleset */
  rules?: Maybe<Array<RepositoryRuleInput>>;
  /** The list of conditions for this ruleset */
  conditions?: Maybe<RepositoryRuleConditionsInput>;
  /** The enforcement level for this ruleset */
  enforcement?: Maybe<RuleEnforcement>;
  /** The bypass mode for this ruleset */
  bypassMode?: Maybe<RuleBypassMode>;
  /** A list of Team or App IDs allowed to bypass rules in this ruleset. */
  bypassActorIds?: Maybe<Array<Scalars['ID']>>;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
};


/** Autogenerated input type of UpdateRepositoryWebCommitSignoffSetting */
export type UpdateRepositoryWebCommitSignoffSettingInput = {
  /** The ID of the repository to update. */
  repositoryId: Scalars['ID'];
  /** Indicates if the repository should require signoff on web-based commits. */
  webCommitSignoffRequired: Scalars['Boolean'];
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
};


/** Autogenerated input type of UpdateSponsorshipPreferences */
export type UpdateSponsorshipPreferencesInput = {
  /** The ID of the user or organization who is acting as the sponsor, paying for the sponsorship. Required if sponsorLogin is not given. */
  sponsorId?: Maybe<Scalars['ID']>;
  /** The username of the user or organization who is acting as the sponsor, paying for the sponsorship. Required if sponsorId is not given. */
  sponsorLogin?: Maybe<Scalars['String']>;
  /** The ID of the user or organization who is receiving the sponsorship. Required if sponsorableLogin is not given. */
  sponsorableId?: Maybe<Scalars['ID']>;
  /** The username of the user or organization who is receiving the sponsorship. Required if sponsorableId is not given. */
  sponsorableLogin?: Maybe<Scalars['String']>;
  /** Whether the sponsor should receive email updates from the sponsorable. */
  receiveEmails?: Maybe<Scalars['Boolean']>;
  /** Specify whether others should be able to see that the sponsor is sponsoring the sponsorable. Public visibility still does not reveal which tier is used. */
  privacyLevel?: Maybe<SponsorshipPrivacy>;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
};


/** Autogenerated input type of UpdateSubscription */
export type UpdateSubscriptionInput = {
  /** The Node ID of the subscribable object to modify. */
  subscribableId: Scalars['ID'];
  /** The new state of the subscription. */
  state: SubscriptionState;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
};


/** Autogenerated input type of UpdateTeamDiscussionComment */
export type UpdateTeamDiscussionCommentInput = {
  /** The ID of the comment to modify. */
  id: Scalars['ID'];
  /** The updated text of the comment. */
  body: Scalars['String'];
  /** The current version of the body content. */
  bodyVersion?: Maybe<Scalars['String']>;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
};


/** Autogenerated input type of UpdateTeamDiscussion */
export type UpdateTeamDiscussionInput = {
  /** The Node ID of the discussion to modify. */
  id: Scalars['ID'];
  /** The updated title of the discussion. */
  title?: Maybe<Scalars['String']>;
  /** The updated text of the discussion. */
  body?: Maybe<Scalars['String']>;
  /** The current version of the body content. If provided, this update operation will be rejected if the given version does not match the latest version on the server. */
  bodyVersion?: Maybe<Scalars['String']>;
  /** If provided, sets the pinned state of the updated discussion. */
  pinned?: Maybe<Scalars['Boolean']>;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
};


/** Autogenerated input type of UpdateTeamsRepository */
export type UpdateTeamsRepositoryInput = {
  /** Repository ID being granted access to. */
  repositoryId: Scalars['ID'];
  /** A list of teams being granted access. Limit: 10 */
  teamIds: Array<Scalars['ID']>;
  /** Permission that should be granted to the teams. */
  permission: RepositoryPermission;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
};


/** Autogenerated input type of UpdateTopics */
export type UpdateTopicsInput = {
  /** The Node ID of the repository. */
  repositoryId: Scalars['ID'];
  /** An array of topic names. */
  topicNames: Array<Scalars['String']>;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
};



/** The possible durations that a user can be blocked for. */
export type UserBlockDuration =
  /** The user was blocked for 1 day */
  | 'ONE_DAY'
  /** The user was blocked for 3 days */
  | 'THREE_DAYS'
  /** The user was blocked for 7 days */
  | 'ONE_WEEK'
  /** The user was blocked for 30 days */
  | 'ONE_MONTH'
  /** The user was blocked permanently */
  | 'PERMANENT';











/** Ordering options for user status connections. */
export type UserStatusOrder = {
  /** The field to order user statuses by. */
  field: UserStatusOrderField;
  /** The ordering direction. */
  direction: OrderDirection;
};

/** Properties by which user status connections can be ordered. */
export type UserStatusOrderField =
  /** Order user statuses by when they were updated. */
  | 'UPDATED_AT';




/** Ordering options for verifiable domain connections. */
export type VerifiableDomainOrder = {
  /** The field to order verifiable domains by. */
  field: VerifiableDomainOrderField;
  /** The ordering direction. */
  direction: OrderDirection;
};

/** Properties by which verifiable domain connections can be ordered. */
export type VerifiableDomainOrderField =
  /** Order verifiable domains by the domain name. */
  | 'DOMAIN'
  /** Order verifiable domains by their creation date. */
  | 'CREATED_AT';


/** Autogenerated input type of VerifyVerifiableDomain */
export type VerifyVerifiableDomainInput = {
  /** The ID of the verifiable domain to verify. */
  id: Scalars['ID'];
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
};








/** Ways in which lists of workflow runs can be ordered upon return. */
export type WorkflowRunOrder = {
  /** The field by which to order workflows. */
  field: WorkflowRunOrderField;
  /** The direction in which to order workflow runs by the specified field. */
  direction: OrderDirection;
};

/** Properties by which workflow run connections can be ordered. */
export type WorkflowRunOrderField =
  /** Order workflow runs by most recently created */
  | 'CREATED_AT';

/** The possible states for a workflow. */
export type WorkflowState =
  /** The workflow is active. */
  | 'ACTIVE'
  /** The workflow was deleted from the git repository. */
  | 'DELETED'
  /** The workflow was disabled by default on a fork. */
  | 'DISABLED_FORK'
  /** The workflow was disabled for inactivity in the repository. */
  | 'DISABLED_INACTIVITY'
  /** The workflow was disabled manually. */
  | 'DISABLED_MANUALLY';


type Author_Actor_Bot_Fragment = { __typename?: 'Bot', avatarUrl: any, login: string };

type Author_Actor_EnterpriseUserAccount_Fragment = { __typename?: 'EnterpriseUserAccount', avatarUrl: any, name?: Maybe<string>, login: string };

type Author_Actor_Mannequin_Fragment = { __typename?: 'Mannequin' };

type Author_Actor_Organization_Fragment = { __typename?: 'Organization', avatarUrl: any, name?: Maybe<string>, login: string, twitterUsername?: Maybe<string> };

type Author_Actor_User_Fragment = { __typename?: 'User', avatarUrl: any, name?: Maybe<string>, login: string, twitterUsername?: Maybe<string> };

export type Author_ActorFragment = Author_Actor_Bot_Fragment | Author_Actor_EnterpriseUserAccount_Fragment | Author_Actor_Mannequin_Fragment | Author_Actor_Organization_Fragment | Author_Actor_User_Fragment;

export type Comment_IssueCommentFragment = { __typename?: 'IssueComment', id: string, body: string, createdAt: any, lastEditedAt?: Maybe<any>, isMinimized: boolean, minimizedReason?: Maybe<string>, reactions: { __typename?: 'ReactionConnection', totalCount: number }, reactionGroups?: Maybe<Array<(
    { __typename?: 'ReactionGroup' }
    & Reactions_ReactionGroupFragment
  )>>, author?: Maybe<(
    { __typename?: 'Bot' }
    & Author_Actor_Bot_Fragment
  ) | (
    { __typename?: 'EnterpriseUserAccount' }
    & Author_Actor_EnterpriseUserAccount_Fragment
  ) | (
    { __typename?: 'Mannequin' }
    & Author_Actor_Mannequin_Fragment
  ) | (
    { __typename?: 'Organization' }
    & Author_Actor_Organization_Fragment
  ) | (
    { __typename?: 'User' }
    & Author_Actor_User_Fragment
  )> };

export type Label_LabelFragment = { __typename?: 'Label', id: string, name: string, color: string, issues: { __typename?: 'IssueConnection', totalCount: number } };

export type Labels_LabelConnectionFragment = { __typename?: 'LabelConnection', nodes?: Maybe<Array<Maybe<{ __typename?: 'Label', name: string }>>> };

export type PageInfo_PageInfoFragment = { __typename?: 'PageInfo', endCursor?: Maybe<string>, startCursor?: Maybe<string>, hasNextPage: boolean, hasPreviousPage: boolean };

export type Post_IssueFragment = { __typename?: 'Issue', id: string, url: any, updatedAt: any, createdAt: any, title: string, body: string, author?: Maybe<(
    { __typename?: 'Bot' }
    & Author_Actor_Bot_Fragment
  ) | (
    { __typename?: 'EnterpriseUserAccount' }
    & Author_Actor_EnterpriseUserAccount_Fragment
  ) | (
    { __typename?: 'Mannequin' }
    & Author_Actor_Mannequin_Fragment
  ) | (
    { __typename?: 'Organization' }
    & Author_Actor_Organization_Fragment
  ) | (
    { __typename?: 'User' }
    & Author_Actor_User_Fragment
  )>, reactionGroups?: Maybe<Array<(
    { __typename?: 'ReactionGroup' }
    & Reactions_ReactionGroupFragment
  )>>, labels?: Maybe<(
    { __typename?: 'LabelConnection' }
    & Labels_LabelConnectionFragment
  )>, comments: { __typename?: 'IssueCommentConnection', totalCount: number }, reactions: { __typename?: 'ReactionConnection', totalCount: number } };

export type PostReduced_IssueFragment = (
  { __typename?: 'Issue' }
  & Post_IssueFragment
);

export type Reactions_ReactionGroupFragment = { __typename?: 'ReactionGroup', content: ReactionContent, users: { __typename?: 'ReactingUserConnection', totalCount: number } };

export type GetCommentsQueryVariables = Exact<{
  query: Scalars['String'];
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  after?: Maybe<Scalars['String']>;
}>;


export type GetCommentsQuery = { __typename?: 'Query', search: { __typename?: 'SearchResultItemConnection', nodes?: Maybe<Array<Maybe<{ __typename?: 'App' } | { __typename?: 'Discussion' } | { __typename?: 'Issue', comments: { __typename?: 'IssueCommentConnection', totalCount: number, pageInfo: (
          { __typename?: 'PageInfo' }
          & PageInfo_PageInfoFragment
        ), edges?: Maybe<Array<Maybe<{ __typename?: 'IssueCommentEdge', cursor: string, node?: Maybe<(
            { __typename?: 'IssueComment' }
            & Comment_IssueCommentFragment
          )> }>>> } } | { __typename?: 'MarketplaceListing' } | { __typename?: 'Organization' } | { __typename?: 'PullRequest' } | { __typename?: 'Repository' } | { __typename?: 'User' }>>> } };

export type GetLabelsQueryVariables = Exact<{
  query?: Maybe<Scalars['String']>;
  name: Scalars['String'];
  owner: Scalars['String'];
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  after?: Maybe<Scalars['String']>;
}>;


export type GetLabelsQuery = { __typename?: 'Query', repository?: Maybe<{ __typename?: 'Repository', labels?: Maybe<{ __typename?: 'LabelConnection', totalCount: number, pageInfo: (
        { __typename?: 'PageInfo' }
        & PageInfo_PageInfoFragment
      ), edges?: Maybe<Array<Maybe<{ __typename?: 'LabelEdge', cursor: string, node?: Maybe<(
          { __typename?: 'Label' }
          & Label_LabelFragment
        )> }>>> }> }> };

export type GetPinnedPostsQueryVariables = Exact<{
  owner: Scalars['String'];
  name: Scalars['String'];
}>;


export type GetPinnedPostsQuery = { __typename?: 'Query', repository?: Maybe<{ __typename?: 'Repository', pinnedIssues?: Maybe<{ __typename?: 'PinnedIssueConnection', nodes?: Maybe<Array<Maybe<{ __typename?: 'PinnedIssue', pinnedBy: (
          { __typename?: 'Bot' }
          & Author_Actor_Bot_Fragment
        ) | (
          { __typename?: 'EnterpriseUserAccount' }
          & Author_Actor_EnterpriseUserAccount_Fragment
        ) | (
          { __typename?: 'Mannequin' }
          & Author_Actor_Mannequin_Fragment
        ) | (
          { __typename?: 'Organization' }
          & Author_Actor_Organization_Fragment
        ) | (
          { __typename?: 'User' }
          & Author_Actor_User_Fragment
        ), issue: (
          { __typename?: 'Issue' }
          & Post_IssueFragment
        ) }>>> }> }> };

export type GetPostQueryVariables = Exact<{
  query: Scalars['String'];
}>;


export type GetPostQuery = { __typename?: 'Query', search: { __typename?: 'SearchResultItemConnection', nodes?: Maybe<Array<Maybe<{ __typename?: 'App' } | { __typename?: 'Discussion' } | (
      { __typename?: 'Issue' }
      & Post_IssueFragment
    ) | { __typename?: 'MarketplaceListing' } | { __typename?: 'Organization' } | { __typename?: 'PullRequest' } | { __typename?: 'Repository' } | { __typename?: 'User' }>>> } };

export type GetPostsQueryVariables = Exact<{
  query: Scalars['String'];
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  after?: Maybe<Scalars['String']>;
}>;


export type GetPostsQuery = { __typename?: 'Query', search: { __typename?: 'SearchResultItemConnection', issueCount: number, pageInfo: { __typename?: 'PageInfo', endCursor?: Maybe<string>, startCursor?: Maybe<string>, hasNextPage: boolean, hasPreviousPage: boolean }, edges?: Maybe<Array<Maybe<{ __typename?: 'SearchResultItemEdge', cursor: string, node?: Maybe<{ __typename?: 'App' } | { __typename?: 'Discussion' } | (
        { __typename?: 'Issue' }
        & Post_IssueFragment
      ) | { __typename?: 'MarketplaceListing' } | { __typename?: 'Organization' } | { __typename?: 'PullRequest' } | { __typename?: 'Repository' } | { __typename?: 'User' }> }>>> } };

export const Reactions_ReactionGroupFragmentDoc = gql`
    fragment Reactions_ReactionGroup on ReactionGroup {
  content
  users {
    totalCount
  }
}
    `;
export const Author_ActorFragmentDoc = gql`
    fragment Author_Actor on Actor {
  ... on User {
    avatarUrl
    name
    login
    twitterUsername
  }
  ... on Organization {
    avatarUrl
    name
    login
    twitterUsername
  }
  ... on EnterpriseUserAccount {
    avatarUrl
    name
    login
  }
  ... on Bot {
    avatarUrl
    login
  }
}
    `;
export const Comment_IssueCommentFragmentDoc = gql`
    fragment Comment_IssueComment on IssueComment {
  id
  body
  createdAt
  lastEditedAt
  isMinimized
  minimizedReason
  reactions {
    totalCount
  }
  reactionGroups {
    ...Reactions_ReactionGroup
  }
  author {
    ...Author_Actor
  }
}
    ${Reactions_ReactionGroupFragmentDoc}
${Author_ActorFragmentDoc}`;
export const Label_LabelFragmentDoc = gql`
    fragment Label_Label on Label {
  id
  name
  color
  issues {
    totalCount
  }
}
    `;
export const PageInfo_PageInfoFragmentDoc = gql`
    fragment PageInfo_PageInfo on PageInfo {
  endCursor
  startCursor
  hasNextPage
  hasPreviousPage
}
    `;
export const Labels_LabelConnectionFragmentDoc = gql`
    fragment Labels_LabelConnection on LabelConnection {
  nodes {
    name
  }
}
    `;
export const Post_IssueFragmentDoc = gql`
    fragment Post_Issue on Issue {
  id
  url
  updatedAt
  createdAt
  title
  body
  author {
    ...Author_Actor
  }
  reactionGroups {
    ...Reactions_ReactionGroup
  }
  labels(first: 100) {
    ...Labels_LabelConnection
  }
  comments {
    totalCount
  }
  reactions {
    totalCount
  }
}
    ${Author_ActorFragmentDoc}
${Reactions_ReactionGroupFragmentDoc}
${Labels_LabelConnectionFragmentDoc}`;
export const PostReduced_IssueFragmentDoc = gql`
    fragment PostReduced_Issue on Issue {
  ...Post_Issue
}
    ${Post_IssueFragmentDoc}`;
export const GetCommentsDocument = gql`
    query GetComments($query: String!, $first: Int, $last: Int, $before: String, $after: String) {
  search(first: 1, type: ISSUE, query: $query) {
    nodes {
      ... on Issue {
        comments(first: $first, last: $last, before: $before, after: $after) {
          totalCount
          pageInfo {
            ...PageInfo_PageInfo
          }
          edges {
            cursor
            node {
              ...Comment_IssueComment
            }
          }
        }
      }
    }
  }
}
    ${PageInfo_PageInfoFragmentDoc}
${Comment_IssueCommentFragmentDoc}`;
export const GetLabelsDocument = gql`
    query GetLabels($query: String, $name: String!, $owner: String!, $first: Int, $last: Int, $before: String, $after: String) {
  repository(name: $name, owner: $owner) {
    labels(
      query: $query
      first: $first
      last: $last
      before: $before
      after: $after
    ) {
      totalCount
      pageInfo {
        ...PageInfo_PageInfo
      }
      edges {
        cursor
        node {
          ...Label_Label
        }
      }
    }
  }
}
    ${PageInfo_PageInfoFragmentDoc}
${Label_LabelFragmentDoc}`;
export const GetPinnedPostsDocument = gql`
    query GetPinnedPosts($owner: String!, $name: String!) {
  repository(owner: $owner, name: $name) {
    pinnedIssues(first: 3) {
      nodes {
        pinnedBy {
          ...Author_Actor
        }
        issue {
          ...Post_Issue
        }
      }
    }
  }
}
    ${Author_ActorFragmentDoc}
${Post_IssueFragmentDoc}`;
export const GetPostDocument = gql`
    query GetPost($query: String!) {
  search(first: 1, type: ISSUE, query: $query) {
    nodes {
      ... on Issue {
        ...Post_Issue
      }
    }
  }
}
    ${Post_IssueFragmentDoc}`;
export const GetPostsDocument = gql`
    query GetPosts($query: String!, $first: Int, $last: Int, $before: String, $after: String) {
  search(
    query: $query
    first: $first
    last: $last
    before: $before
    after: $after
    type: ISSUE
  ) {
    issueCount
    pageInfo {
      endCursor
      startCursor
      hasNextPage
      hasPreviousPage
    }
    edges {
      cursor
      node {
        ...Post_Issue
      }
    }
  }
}
    ${Post_IssueFragmentDoc}`;

export type SdkFunctionWrapper = <T>(action: () => Promise<T>) => Promise<T>;


const defaultWrapper: SdkFunctionWrapper = sdkFunction => sdkFunction();
export function getSdk(client: GraphQLClient, withWrapper: SdkFunctionWrapper = defaultWrapper) {
  return {
    GetComments(variables: GetCommentsQueryVariables, requestHeaders?: Dom.RequestInit["headers"]): Promise<GetCommentsQuery> {
      return withWrapper(() => client.request<GetCommentsQuery>(GetCommentsDocument, variables, requestHeaders));
    },
    GetLabels(variables: GetLabelsQueryVariables, requestHeaders?: Dom.RequestInit["headers"]): Promise<GetLabelsQuery> {
      return withWrapper(() => client.request<GetLabelsQuery>(GetLabelsDocument, variables, requestHeaders));
    },
    GetPinnedPosts(variables: GetPinnedPostsQueryVariables, requestHeaders?: Dom.RequestInit["headers"]): Promise<GetPinnedPostsQuery> {
      return withWrapper(() => client.request<GetPinnedPostsQuery>(GetPinnedPostsDocument, variables, requestHeaders));
    },
    GetPost(variables: GetPostQueryVariables, requestHeaders?: Dom.RequestInit["headers"]): Promise<GetPostQuery> {
      return withWrapper(() => client.request<GetPostQuery>(GetPostDocument, variables, requestHeaders));
    },
    GetPosts(variables: GetPostsQueryVariables, requestHeaders?: Dom.RequestInit["headers"]): Promise<GetPostsQuery> {
      return withWrapper(() => client.request<GetPostsQuery>(GetPostsDocument, variables, requestHeaders));
    }
  };
}
export type Sdk = ReturnType<typeof getSdk>;